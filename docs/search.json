[{"path":"/articles/ngvb.html","id":"ar1-model","dir":"Articles","previous_headings":"","what":"AR1 model","title":"ngvb","text":"fit AR1 latent process jumpts time series.  model following: \\[ y_i = \\sigma_x x_i + \\sigma_y \\epsilon_i,     \\] \\(\\epsilon_i\\) standard Gaussian noise, \\(\\mathbf{x}=[x_1,\\dotsc,x_{100}]^T\\) follows non-Gaussian AR1 prior, defined \\(x_{}=\\rho x_{-1} + \\Lambda_i, =2,\\dotsc,100\\), \\(\\rho\\) autocorrelation \\(\\Lambda_i\\) normal-inverge Gaussian (NIG) noise non-Gaussianity parameter \\(\\eta\\). define prior \\(\\tau_y = \\sigma_y^{-2}\\): prior \\(\\tau_x = \\sigma_x^{-2}\\) \\(\\rho\\): First, start fitting latent Gaussian model (LGM), driving noise latent field normally distributed: Next, consider non-Gaussian version previous model, latent field driven NIG noise. use output inla function LGM input ngvb function. First, need specify components made non-Gaussian selection argument. case, AR1 component name x dimension 100, write selection = list(x=1:100). default, leptokurtosis parameter \\(\\eta\\) exponential prior rate parameter equal 1. can changed argument alpha.eta. Run ?ngvb see arguments. LnGM S4 object class ngvb.list containing outputs, can accessed LnGM@.... Available methods summary, print, plot, fitted, simulate. read help functions, run: can see plot(LnGM) two jump locations picked mixing variables \\(V\\) (add flexibility locations), evolution parameter \\(\\eta\\) seems indicate convergence.  LnGM@LGM contains inla object containing summaries marginals LGM approximation \\((x,\\theta)\\) last iteration. show next log-evidence model:","code":"plot(jumpts) prec.prior <- list(prec = list(prior = \"loggamma\", param = c(1, 0.1))) prior.list <- list(theta1 = list(prior = \"pc.prec\", param = c(1,0.1)),                    theta2 = list(prior = \"pc.cor0\", param = c(0.5,0.5))) formula <- y ~ -1 + f(x,  model = \"ar1\", hyper = prior.list)  LGM     <- inla(formula,                  data = jumpts,                 control.family = list(hyper = prec.prior)) LnGM <- ngvb(fit = LGM, selection = list(x=1:100)) #> Warning in inla.model.properties.generic(inla.trim.family(model), mm[names(mm) == : Model 'cgeneric' in section 'latent' is marked as 'experimental'; changes may appear at any time. #>   Use this model with extra care!!! Further warnings are disabled. #>  #> 0Oo----------- Iteration 1 -----------oO0 #> Initial value of eta: 0.5 #>  #> 0Oo----------- Iteration 2 -----------oO0 #> Expectation of eta: 0.685 #>  #> 0Oo----------- Iteration 3 -----------oO0 #> Expectation of eta: 0.554 #>  #> 0Oo----------- Iteration 4 -----------oO0 #> Expectation of eta: 0.648 #>  #> 0Oo----------- Iteration 5 -----------oO0 #> Expectation of eta: 0.647 #>  #>  0Oo----------- Convergence achieved -----------oO0 #?`summary,ngvb.list-method` #?`print,ngvb.list-method` #?`plot,ngvb.list,missing-method` #?`fitted,ngvb.list-method` #?`simulate,ngvb.list-method` plot(LnGM) LGM$mlik[2] #> [1] -112.7905 LnGM@LGM$mlik[2] #> [1] -92.74516"},{"path":"/articles/ngvb.html","id":"random-slople-random-intercept-model-several-model-components","dir":"Articles","previous_headings":"","what":"Random slople, random intercept model (several model components)","title":"ngvb","text":"fit growth curves orthodontic study including several male female children ages 8,10,12, 14. information references, run ?mice::potthoffroy. Next, show Trellis plot, female subjects labels starting F male subjects starting M.  use following linear mixed-effects model describe response growth age: \\[ y_{j}=\\beta_0+\\delta_0 I_i(F) +\\left(\\beta_1+\\delta_1 I_i(F)\\right) t_j + b_{0 }+b_{1 } t_j+\\epsilon_{j}, \\] \\(y_{j}\\) denotes response \\(\\)th subject age \\(t_j\\), \\(=1, \\ldots, 27\\) \\(j=1, \\ldots, 4\\) ; \\(\\beta_0\\) \\(\\beta_1\\) denote, respectively, intercept slope fixed effects boys; \\(\\delta_0\\) \\(\\delta_1\\) denote, respectively, difference intercept slope fixed effects girls boys; \\(I_i(F)\\) denotes indicator variable females; \\(\\mathbf{b}_i=\\left(b_{0 }, b_{1 }\\right)\\) random effects vector \\(\\) th subject; \\(\\epsilon_{j}\\) within-subject error. dataset : random effects normal prior, previous model LGM can fitted INLA. random intercept elicited formula f(subject, model = \"iid\"), random slopes f(subject2, time, model = \"iid\"). covariates subject1 subject2 since f()-terms INLA depend unique names covariates. consider prior random effects distributed according long-tailed NIG variables accommodate possible outliers intercepts slopes.  random slopes (subject2), posterior means mixing variables \\(V\\) close 1, \\(\\eta\\) close 0, suggesting non-Gaussian model component necessary. show next log-evidence model:","code":"plot(Orthodont.plot, layout = c(16,2)) summary(Orthodont) #>     subject       Female            time          value             tF        #>  Min.   : 1   Min.   :0.0000   Min.   :0.00   Min.   :16.50   Min.   :0.000   #>  1st Qu.: 7   1st Qu.:0.0000   1st Qu.:0.75   1st Qu.:22.00   1st Qu.:0.000   #>  Median :14   Median :0.0000   Median :1.50   Median :23.75   Median :0.000   #>  Mean   :14   Mean   :0.4074   Mean   :1.50   Mean   :24.02   Mean   :1.019   #>  3rd Qu.:21   3rd Qu.:1.0000   3rd Qu.:2.25   3rd Qu.:26.00   3rd Qu.:2.000   #>  Max.   :27   Max.   :1.0000   Max.   :3.00   Max.   :31.50   Max.   :4.000   #>     subject2  #>  Min.   : 1   #>  1st Qu.: 7   #>  Median :14   #>  Mean   :14   #>  3rd Qu.:21   #>  Max.   :27 formula <- value ~ 1 + Female + time + tF + f(subject, model = \"iid\") + f(subject2, time, model = \"iid\")  LGM <- inla(formula,             data = Orthodont) LnGM <- ngvb(LGM, selection = list(subject = 1:27, subject2 = 1:27)) #>  #> 0Oo----------- Iteration 1 -----------oO0 #> Initial value of eta: 0.5 0.5 #>  #> 0Oo----------- Iteration 2 -----------oO0 #> Expectation of eta: 0.264 0.132 #>  #> 0Oo----------- Iteration 3 -----------oO0 #> Expectation of eta: 0.346 0.149 #>  #> 0Oo----------- Iteration 4 -----------oO0 #> Expectation of eta: 0.375 0.156 #>  #> 0Oo----------- Iteration 5 -----------oO0 #> Expectation of eta: 0.386 0.148 #>  #> 0Oo----------- Iteration 6 -----------oO0 #> Expectation of eta: 0.378 0.148 #>  #> 0Oo----------- Iteration 7 -----------oO0 #> Expectation of eta: 0.385 0.158 #>  #> 0Oo----------- Iteration 8 -----------oO0 #> Expectation of eta: 0.375 0.155 #>  #> 0Oo----------- Iteration 9 -----------oO0 #> Expectation of eta: 0.374 0.159 #>  #> 0Oo----------- Iteration 10 -----------oO0 #> Expectation of eta: 0.366 0.156 #>  #>  0Oo----------- Maximum number of iterations reached -----------oO0  plot(LnGM) LGM$mlik[2] #> [1] -250.7419 LnGM@LGM$mlik[2] #> [1] -248.8746"},{"path":"/articles/ngvb.html","id":"sar-model-using-manual-configs","dir":"Articles","previous_headings":"","what":"SAR model (using manual.configs)","title":"ngvb","text":"demonstrate fit LnGM models currently unavailable ngvb inla using rgeneric functionality inla manual.configs argument ngvb. study areal data, consists number residential burglaries vehicle thefts per thousand households (\\(y_i\\)) 49 counties Columbus, Ohio, 1980. dataset can found spdep package. consider following model: \\[ y_{}= \\beta_0 + \\beta_1 \\mathrm{HV}_i + \\beta_2 \\mathrm{HI}_i +  \\sigma_{\\mathbf{x}}x_i + \\sigma_{\\epsilon}\\epsilon_i,   \\] \\(\\mathrm{HV}_i\\) \\(\\mathrm{HI}_i\\) average household value household income county \\(\\), \\(\\mathbf{x}\\) accounts structured spatial effects, \\(\\epsilon_i \\overset{..d}{\\sim} N(0,1)\\) unstructured spatial effect. consider simultaneous autoregressive (SAR) model spatially structured effects \\(\\mathbf{x}\\). Gaussian version model can built following system \\(\\mathbf{D}_{SAR}\\mathbf{x} = \\sigma_{\\mathbf{x}}\\mathbf{Z}\\), \\(\\mathbf{D}_{SAR}=\\mathbf{}-\\rho\\mathbf{W}\\). \\(\\mathbf{W}\\) row standardized adjacency matrix \\(-1<\\rho<1\\). equivalent model driven NIG noise \\(\\mathbf{D}_{SAR}\\mathbf{x} = \\sigma_{\\mathbf{x}}\\mathbf{\\Lambda}\\), \\(\\mathbf{\\Lambda}\\) ..d. standardized NIG noise. Gaussian SAR models implemented INLA, use rgeneric cgeneric functionalities (GÃ³mez-Rubio (2020)). start loading data constructing matrix \\(\\mathbf{W}\\)  now implement latent process \\(\\mathbf{x}|\\mathbf{y},\\mathbf{V},\\sigma_x,\\rho \\sim N(\\mathbf{0}, \\sigma_x^{-2} \\mathbf{D}_{SAR}^{-1} \\text{diag}(\\mathbf{V})\\mathbf{D}_{SAR}^{-T})\\) rgeneric. precision matrix \\(\\mathbf{Q} = \\tau_x \\mathbf{D}_{SAR}^T \\text{diag}(\\mathbf{V})^{-1}\\mathbf{D}_{SAR}\\) defined Q function. consider \\(\\text{Unif}(0,1)\\) prior \\(\\rho\\) half-normal prior \\(\\tau_x\\). now create function receives input mixing vector \\(\\mathbf{V}\\) outputs inla object. input list numeric vectors, vector corresponds model component extend non-Gaussianity (example, just one model component). argument control.compute = list(config = TRUE) inla function required. \\(\\mathbf{V}=\\mathbf{1}\\) latent field Gaussian inla.fit.V gives us LGM.   now define LnGM ngvb using manual.configs argument. manual.configs list containing inla.fit.V. also include Dfunc list containing functions \\(\\mathbf{D}_{SAR}(\\boldsymbol{\\theta})\\) model component, receive input hyperparameters \\(\\boldsymbol{\\theta}\\) internal scale, outputs \\(\\mathbf{D}_{SAR}(\\boldsymbol{\\theta})\\). Finally, manual.configs also needs h, list containing predefined constant vectors (see Cabral, Bolin, Rue (2022)) model component. now call ngvb, analyze output.  can see plot(LnGM) flexibility added 2 counties.","code":"# Required package names packages <- c(\"spdep\", \"rgdal\")   # Install packages not yet installed installed_packages <- packages %in% rownames(installed.packages()) if (any(installed_packages == FALSE)) {  install.packages(packages[!installed_packages]) }  # Packages loading invisible(lapply(packages, library, character.only = TRUE))  data(columbus) data    <- columbus[,c(\"CRIME\",\"HOVAL\",\"INC\")]       # data N    <- nrow(data)                                   # number of counties data$s  <- 1:N  map  <- readOGR(system.file(\"shapes/columbus.shp\", package=\"spData\")[1]) #shape file containing the polygons #> OGR data source with driver: ESRI Shapefile  #> Source: \"C:\\R\\library\\spData\\shapes\\columbus.shp\", layer: \"columbus\" #> with 49 features #> It has 20 fields #> Integer64 fields read as strings:  COLUMBUS_ COLUMBUS_I POLYID plot(map) nb_q <- poly2nb(map)                                   # Construct neighbours list from polygon list nb_W <- nb2listw(nb_q, style=\"B\", zero.policy=TRUE)    # Spatial weights for neighbours lists W    <- as.matrix(as(nb_W, \"sparseMatrix\"))            # Adjacency matrix W W    <- diag(1/rowSums(W))%*%W                         # Row standardize adjacency matrix   eigenv    <- eigen(W)$values                           # Eigenvalues of W. We need them to compute the log-determinant of the precision matrix 'inla.rgeneric.sar.model' <- function(     cmd = c(\"graph\", \"Q\", \"mu\", \"initial\", \"log.norm.const\",             \"log.prior\", \"quit\"),     theta = NULL) {      envir = parent.env(environment())      #Internal scale is log of precision and log of kappa   interpret.theta <- function() {     return(list(prec = exp(theta[1L]),                 rho = exp(theta[2L])/(1+exp(theta[2L]))))   }         graph <- function(){     return(Q())   }      Q <- function() {      param = interpret.theta()     rho <- param$rho     prec  <- param$prec          D = Diagonal(n,rep(1,n)) - rho*W          return(prec*t(D)%*%Diagonal(n,1/V)%*%D)   }      mu <- function()   {     return(numeric(0))   }      log.norm.const <- function() {          param = interpret.theta()     rho <- param$rho     prec  <- param$prec          log.det.D <- sum(log(1-rho*eigenv))          res <- -0.5*n*log(2*pi) + 0.5*n*log(prec) + log.det.D -0.5*sum(log(V))     return (res)  }          log.prior <- function() {          param = interpret.theta()     rho <- param$rho     prec  <- param$prec          tau_prec = 1/sqrt(5)            prior.theta1 <- log( (2*sqrt(tau_prec/(2*pi)))*exp(-0.5*tau_prec*prec^2) ) + theta[1L]     prior.theta2 <- log(exp(theta[2L])/(1+exp(theta[2L]))^2)          res <-  prior.theta1 + prior.theta2          return(res)   }         initial <- function() {     return(c(0,0))   }         quit <- function() {     return(invisible())   }      if (!length(theta)) theta = initial()   res <- do.call(match.arg(cmd), args = list())   return(res) } inla.fit.V <- function(V){      model = inla.rgeneric.define(inla.rgeneric.sar.model, n = N, V = V[[1]], W = W, eigenv = eigenv)    formula <- CRIME ~ 1 + HOVAL + INC  + f(s, model = model)    fit <- inla(formula,                data = data,               control.compute = list(config = TRUE))      return(fit) } LGM <- inla.fit.V(list(rep(1,N))) #> Warning in inla.model.properties.generic(inla.trim.family(model), mm[names(mm) == : Model 'rgeneric' in section 'latent' is marked as 'experimental'; changes may appear at any time. #>   Use this model with extra care!!! Further warnings are disabled.  LGM$summary.hyperpar #>                                                  mean           sd  0.025quant #> Precision for the Gaussian observations 24318.5538538 1.928320e+04 4430.410171 #> Theta1 for s                               -4.6091793 2.157958e-01   -5.046112 #> Theta2 for s                                0.2937336 7.159974e-01   -1.151417 #>                                              0.5quant   0.975quant #> Precision for the Gaussian observations 19128.4684320 75194.854060 #> Theta1 for s                               -4.6044219    -4.196520 #> Theta2 for s                                0.3082958     1.665453 #>                                                  mode #> Precision for the Gaussian observations 11311.7960526 #> Theta1 for s                               -4.5866059 #> Theta2 for s                                0.3620822 LGM$mlik[2] #> [1] -199.5641  #posterior marginals of the precision tau_x and  autocorrelation parameter rho plot(inla.tmarginal(function(x)  exp(x), LGM$marginals.hyperpar$`Theta2 for s`), type = 'l', col = 'red', main = \"precision\") plot(inla.tmarginal(function(x)  exp(x)/(1+exp(x)), LGM$marginals.hyperpar$`Theta2 for s`), type = 'l', col = 'red', main = \"rho\") D1  <- function(theta){   prec   <- exp(theta[2L])    rho    <- exp(theta[3L])/(1+exp(theta[3L]))   return(sqrt(prec)*(Diagonal(N,rep(1,N)) - rho*W)) } Dfunc <- list(D1)  h         <- list(rep(1,N))  manual.configs <- list(inla.fit.V = inla.fit.V, Dfunc = Dfunc, h = h) LnGM <- ngvb(manual.configs = manual.configs, selection = list(s=1:N),               iter = 10, d.sampling = TRUE, n.sampling = 1000) #>  #> 0Oo----------- Iteration 1 -----------oO0 #> Initial value of eta: 0.5 #>  #> 0Oo----------- Iteration 2 -----------oO0 #> Expectation of eta: 0.39 #>  #> 0Oo----------- Iteration 3 -----------oO0 #> Expectation of eta: 0.517 #>  #> 0Oo----------- Iteration 4 -----------oO0 #> Expectation of eta: 0.612 #>  #> 0Oo----------- Iteration 5 -----------oO0 #> Expectation of eta: 0.664 #>  #> 0Oo----------- Iteration 6 -----------oO0 #> Expectation of eta: 0.685 #>  #> 0Oo----------- Iteration 7 -----------oO0 #> Expectation of eta: 0.652 #> Error in inla.inlaprogram.has.crashed() :  #>   The inla-program exited with an error. Unless you interupted it yourself, please rerun with verbose=TRUE and check the output carefully. #>   If this does not help, please contact the developers at <help@r-inla.org>. #>  #>  *** inla.core.safe:  inla.program has crashed: rerun to get better initial values. try=1/2  #> Error in inla.inlaprogram.has.crashed() :  #>   The inla-program exited with an error. Unless you interupted it yourself, please rerun with verbose=TRUE and check the output carefully. #>   If this does not help, please contact the developers at <help@r-inla.org>. #>  #>  *** inla.core.safe:  inla.program has crashed: rerun to get better initial values. try=2/2  #>  #>  *** inla.core.safe:  rerun with improved initial values  #>  #> 0Oo----------- Iteration 8 -----------oO0 #> Expectation of eta: 0.668 #>  #> 0Oo----------- Iteration 9 -----------oO0 #> Expectation of eta: 0.695 #>  #> 0Oo----------- Iteration 10 -----------oO0 #> Expectation of eta: 0.661 #>  #>  0Oo----------- Maximum number of iterations reached -----------oO0  plot(LnGM) plot(LnGM) LnGM@LGM$mlik[2] #> [1] -188.1678  #posterior marginals of the precision tau_x and  autocorrelation parameter rho plot(inla.tmarginal(function(x)  exp(x), LnGM@LGM$marginals.hyperpar$`Theta2 for s`), type = 'l', col = 'red', main = \"precision\") plot(inla.tmarginal(function(x)  exp(x)/(1+exp(x)), LnGM@LGM$marginals.hyperpar$`Theta2 for s`), type = 'l', col = 'red', main = \"rho\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rafael Cabral. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cabral R (2022). ngvb: Approximate inference latent non-Gaussian models. R package version 0.1.0.","code":"@Manual{,   title = {ngvb: Approximate inference of latent non-Gaussian models},   author = {Rafael Cabral},   year = {2022},   note = {R package version 0.1.0}, }"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright Â© 2007 Free Software Foundation, Inc.Â <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions programâmake sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developersâ authorsâ protection, GPL clearly explains warranty free software. usersâ authorsâ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting usersâ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"âLicenseâ refers version 3 GNU General Public License. âCopyrightâ also means copyright-like laws apply kinds works, semiconductor masks. âProgramâ refers copyrightable work licensed License. licensee addressed ââ. âLicenseesâ ârecipientsâ may individuals organizations. âmodifyâ work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called âmodified versionâ earlier work work âbased â earlier work. âcovered workâ means either unmodified Program work based Program. âpropagateâ work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. âconveyâ work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays âAppropriate Legal Noticesâ extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"âsource codeâ work means preferred form work making modifications . âObject codeâ means non-source form work. âStandard Interfaceâ means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. âSystem Librariesâ executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. âMajor Componentâ, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . âCorresponding Sourceâ work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include workâs System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Usersâ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, workâs users, third partiesâ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Programâs source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 âkeep intact noticesâ. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called âaggregateâ compilation resulting copyright used limit access legal rights compilationâs users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. âUser Productâ either (1) âconsumer productâ, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, ânormally usedâ refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. âInstallation Informationâ User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"âAdditional permissionsâ terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered ârestrictionsâ within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. âentity transactionâ transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work partyâs predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"âcontributorâ copyright holder authorizes use License Program work Program based. work thus licensed called contributorâs âcontributor versionâ. contributorâs âessential patent claimsâ patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, âcontrolâ includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributorâs essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, âpatent licenseâ express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). âgrantâ patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. âKnowingly relyingâ means actual knowledge , patent license, conveying covered work country, recipientâs use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license âdiscriminatoryâ include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Othersâ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License âlater versionâ applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxyâs public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM ââ WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least âcopyrightâ line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, programâs commands might different; GUI interface, use âboxâ. also get employer (work programmer) school, , sign âcopyright disclaimerâ program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/reference/fitted.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of the fitted values. Also returns the marginals of the fitted values\r\nif compute=TRUE in control.predictor of the inla object fit. â fitted,ngvb.list-method","title":"Summary of the fitted values. Also returns the marginals of the fitted values\r\nif compute=TRUE in control.predictor of the inla object fit. â fitted,ngvb.list-method","text":"Summary fitted values. Also returns marginals fitted values compute=TRUE control.predictor inla object fit.","code":""},{"path":"/reference/fitted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of the fitted values. Also returns the marginals of the fitted values\r\nif compute=TRUE in control.predictor of the inla object fit. â fitted,ngvb.list-method","text":"","code":"# S4 method for ngvb.list fitted(object)"},{"path":"/reference/fitted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of the fitted values. Also returns the marginals of the fitted values\r\nif compute=TRUE in control.predictor of the inla object fit. â fitted,ngvb.list-method","text":"object ngvb.list object (output ngvb function)","code":""},{"path":"/reference/fitted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of the fitted values. Also returns the marginals of the fitted values\r\nif compute=TRUE in control.predictor of the inla object fit. â fitted,ngvb.list-method","text":"","code":"#Here we fit an RW1 latent process to the jumpts time series  plot(jumpts)    #Fit LGM with INLA  LGM     <- inla(y ~ -1 + f(x,  model = \"rw1\"),                  data = jumpts)   #Fit LnGM with ngvb  LnGM <- ngvb(fit = LGM, selection = list(x=1:100)) #> [1] \"Warning: You need to add log(|D|) to mll: check inla.doc(generic0)\" #>  #> 0Oo----------- Iteration 1 -----------oO0 #> Initial value of eta: 0.5 #>  #> 0Oo----------- Iteration 2 -----------oO0 #> Expectation of eta: 4.792 #>  #> 0Oo----------- Iteration 3 -----------oO0 #> Expectation of eta: 3.94 #>  #> 0Oo----------- Iteration 4 -----------oO0 #> Expectation of eta: 3.413 #>  #> 0Oo----------- Iteration 5 -----------oO0 #> Expectation of eta: 3.03 #>  #> 0Oo----------- Iteration 6 -----------oO0 #> Expectation of eta: 2.781 #>  #> 0Oo----------- Iteration 7 -----------oO0 #> Expectation of eta: 2.611 #>  #> 0Oo----------- Iteration 8 -----------oO0 #> Expectation of eta: 2.489 #>  #> 0Oo----------- Iteration 9 -----------oO0 #> Expectation of eta: 2.431 #>  #> 0Oo----------- Iteration 10 -----------oO0 #> Expectation of eta: 2.373 #>  #>  0Oo----------- Maximum number of iterations reached -----------oO0   #Available methods  summary(LnGM) #>                                     mean        sd 0.025quant 0.5quant #> Non Gaussianity parameter for x 2.372549 0.7542488   1.240794 2.279407 #>                                 0.975quant #> Non Gaussianity parameter for x   4.034503 #>  #> Call: #>    c(\"inla.core(formula = formula, family = family, contrasts = contrasts,  #>    \", \" data = data, quantiles = quantiles, E = E, offset = offset, \", \"  #>    scale = scale, weights = weights, Ntrials = Ntrials, strata = strata,  #>    \", \" lp.scale = lp.scale, link.covariates = link.covariates, verbose =  #>    verbose, \", \" lincomb = lincomb, selection = selection, control.compute  #>    = control.compute, \", \" control.predictor = control.predictor,  #>    control.family = control.family, \", \" control.inla = control.inla,  #>    control.fixed = control.fixed, \", \" control.mode = control.mode,  #>    control.expert = control.expert, \", \" control.hazard = control.hazard,  #>    control.lincomb = control.lincomb, \", \" control.update =  #>    control.update, control.lp.scale = control.lp.scale, \", \"  #>    control.pardiso = control.pardiso, only.hyperparam = only.hyperparam,  #>    \", \" inla.call = inla.call, inla.arg = inla.arg, num.threads =  #>    num.threads, \", \" blas.num.threads = blas.num.threads, keep = keep,  #>    working.directory = working.directory, \", \" silent = silent, inla.mode  #>    = inla.mode, safe = FALSE, debug = debug, \", \" .parent.frame =  #>    .parent.frame)\")  #> Random effects: #>   Name\t  Model #>     x Generic0 model #>  #> Model hyperparameters: #>                                             mean       sd 0.025quant 0.5quant #> Precision for the Gaussian observations 18775.58 1.84e+04    1349.07 13259.12 #> Precision for x                             4.52 6.37e-01       3.37     4.48 #>                                         0.975quant    mode #> Precision for the Gaussian observations   67843.93 3754.87 #> Precision for x                               5.88    4.42 #>  #> Marginal log-Likelihood:  -76.36  #>  is computed  #> Posterior summaries for the linear predictor and the fitted values are computed #> (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)') #>   print(LnGM) #> Call: #>    c(\"inla.core(formula = formula, family = family, contrasts = contrasts,  #>    \", \" data = data, quantiles = quantiles, E = E, offset = offset, \", \"  #>    scale = scale, weights = weights, Ntrials = Ntrials, strata = strata,  #>    \", \" lp.scale = lp.scale, link.covariates = link.covariates, verbose =  #>    verbose, \", \" lincomb = lincomb, selection = selection, control.compute  #>    = control.compute, \", \" control.predictor = control.predictor,  #>    control.family = control.family, \", \" control.inla = control.inla,  #>    control.fixed = control.fixed, \", \" control.mode = control.mode,  #>    control.expert = control.expert, \", \" control.hazard = control.hazard,  #>    control.lincomb = control.lincomb, \", \" control.update =  #>    control.update, control.lp.scale = control.lp.scale, \", \"  #>    control.pardiso = control.pardiso, only.hyperparam = only.hyperparam,  #>    \", \" inla.call = inla.call, inla.arg = inla.arg, num.threads =  #>    num.threads, \", \" blas.num.threads = blas.num.threads, keep = keep,  #>    working.directory = working.directory, \", \" silent = silent, inla.mode  #>    = inla.mode, safe = FALSE, debug = debug, \", \" .parent.frame =  #>    .parent.frame)\")  #> Time used: #>   Pre = 0.484, Running = 0.149, Post = 0.129, Total = 0.763 #>  #>   #> ngvb Configurations:  #> $h #> $h[[1]] #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> [39] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> [77] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #>  #>  #> $alpha.eta #> [1] 1 #>  #> $method #> [1] \"SCVI\" #>  #> $N #> [1] 100 #>  #> $ncomp #> [1] 1 #>  #> $selection #> $selection$x #>   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18 #>  [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36 #>  [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54 #>  [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72 #>  [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90 #>  [91]  91  92  93  94  95  96  97  98  99 100 #>  #>  #> $n.sampling #> [1] 1000 #>  #> $inla.fit.V #> function(V, theta = NULL){ #>  #>     for(i in 1:ncomp){ #>  #>       #USE generic0 or cgeneric? #>       if(use.generic0[i]){ #If so you only need to define matrices Q and rankdefs #>         D <- D.config[[i]]$D #>  #>         assign(paste('VINIG.Q.',i,sep=\"\"), as(t(D)%*%Diagonal(length(V[[i]]),1/V[[i]])%*%D, \"dgTMatrix\"), envir = .GlobalEnv) #>  #>       }else if( model[i] == \"iid\") { #>         assign(\"V\", V, envir = .GlobalEnv) #>  #>       }else if (model[i] == \"ar1\"){ #If so you only need to define matrices Q and rankdefs #>  #>  #>         pcprior <- D.config[[i]]$pcprior #>  #>         folder  <- paste0(system.file(package = 'ngvb'),'/cfiles/') #>  #>         cmodel  <- inla.cgeneric.define(model = \"inla_cgeneric_ar1_model\", #>                                         shlib = paste0(folder,\"cgeneric-ngvb.so\"), #>                                         n     = N[[i]], #>                                         V     = V[[i]], #>                                         U1    = pcprior$U1, #>                                         alpha1= pcprior$alpha1, #>                                         U2    = pcprior$U2, #>                                         alpha2= pcprior$alpha2) #>  #>         assign(paste('rgeneric',i,sep=\"\"), cmodel, envir = .GlobalEnv) #>  #>       } #>  #>       #needed for sampling from x for a fixed value of theta #>       if(!is.null(theta)){ #>         arglist$control.mode = list(theta = theta, fixed = TRUE) #>       } #>  #>       fit       <- do.call(inla, arglist) #>       return(fit) #>     } #>  #>     return(inla.fit.V) #>   } #> <bytecode: 0x00000265f3513b80> #> <environment: 0x00000265f3541c78> #>   plot(LnGM)    fitted(LnGM) #> $summary #>                            mean          sd 0.025quant   0.5quant 0.975quant #> fitted.Predictor.001 -0.9081144 0.009747989 -0.9274324 -0.9082807 -0.8876889 #> fitted.Predictor.002 -0.5960035 0.009715635 -0.6169321 -0.5957788 -0.5771582 #> fitted.Predictor.003 -0.7245496 0.009719532 -0.7436236 -0.7247629 -0.7039899 #> fitted.Predictor.004 -0.6291394 0.009712140 -0.6499691 -0.6289353 -0.6102239 #> fitted.Predictor.005 -0.9996729 0.009791615 -1.0184542 -0.9999930 -0.9785250 #> fitted.Predictor.006 -0.5414939 0.009748771 -0.5626689 -0.5412296 -0.5227357 #> fitted.Predictor.007 -1.0482292 0.009712131 -1.0677278 -1.0483349 -1.0281173 #> fitted.Predictor.008 -1.1161863 0.009740299 -1.1352434 -1.1164131 -1.0955281 #> fitted.Predictor.009 -0.7042889 0.009698254 -0.7244715 -0.7042267 -0.6848627 #> fitted.Predictor.010 -0.6409373 0.009679487 -0.6611343 -0.6408631 -0.6215922 #> fitted.Predictor.011 -0.6868322 0.009681627 -0.7067754 -0.6868180 -0.6672513 #> fitted.Predictor.012 -0.7929855 0.009746599 -0.8119642 -0.7932349 -0.7722225 #> fitted.Predictor.013 -0.4950327 0.009742897 -0.5162121 -0.4947646 -0.4762988 #> fitted.Predictor.014 -0.9500786 0.009793901 -0.9689027 -0.9503890 -0.9289669 #> fitted.Predictor.015 -0.2565103 0.009722606 -0.2773930 -0.2562995 -0.2376016 #> fitted.Predictor.016 -0.3807916 0.009705232 -0.4007632 -0.3807819 -0.3611491 #> fitted.Predictor.017 -1.1004737 0.009790767 -1.1192728 -1.1007889 -1.0793480 #> fitted.Predictor.018 -0.7871879 0.009712920 -0.8080454 -0.7869778 -0.7682931 #> fitted.Predictor.019 -0.8903922 0.009751942 -0.9093622 -0.8906465 -0.8695993 #> fitted.Predictor.020 -0.4655368 0.009740560 -0.4864029 -0.4653380 -0.4465509 #> fitted.Predictor.021 -3.9530129 0.009773120 -3.9720837 -3.9532516 -3.9322406 #> fitted.Predictor.022 -3.5039863 0.009747745 -3.5251458 -3.5037250 -3.4852191 #> fitted.Predictor.023 -4.0008447 0.009793144 -4.0196166 -4.0011679 -3.9796805 #> fitted.Predictor.024 -3.6413141 0.009695073 -3.6616340 -3.6412184 -3.6220215 #> fitted.Predictor.025 -3.6091076 0.009703812 -3.6285081 -3.6092335 -3.5889322 #> fitted.Predictor.026 -3.3891017 0.009707411 -3.4099050 -3.3889017 -3.3701801 #> fitted.Predictor.027 -3.5035746 0.009686990 -3.5234928 -3.5035690 -3.4839508 #> fitted.Predictor.028 -3.6584678 0.009695450 -3.6779257 -3.6585757 -3.6383798 #> fitted.Predictor.029 -3.6965046 0.009681188 -3.7164820 -3.6964819 -3.6769566 #> fitted.Predictor.030 -3.8016896 0.009741826 -3.8206714 -3.8019359 -3.7809484 #> fitted.Predictor.031 -3.5614299 0.009688356 -3.5815963 -3.5613669 -3.5420253 #> fitted.Predictor.032 -3.5079954 0.009694354 -3.5285844 -3.5078380 -3.4889384 #> fitted.Predictor.033 -3.7135794 0.009709722 -3.7328605 -3.7137371 -3.6932644 #> fitted.Predictor.034 -3.7093070 0.009684922 -3.7296494 -3.7092015 -3.6900707 #> fitted.Predictor.035 -3.8766208 0.009691742 -3.8964039 -3.8766490 -3.8568549 #> fitted.Predictor.036 -4.0503198 0.009772494 -4.0691335 -4.0506227 -4.0292821 #> fitted.Predictor.037 -3.6454011 0.009711104 -3.6652333 -3.6454268 -3.6256086 #> fitted.Predictor.038 -3.3376804 0.009745816 -3.3588736 -3.3374108 -3.3189472 #> fitted.Predictor.039 -3.9230660 0.009795483 -3.9418158 -3.9233960 -3.9018689 #> fitted.Predictor.040 -3.5925231 0.009720943 -3.6127835 -3.5924533 -3.5730838 #> fitted.Predictor.041  1.6211732 0.009725012  1.6004434  1.6213486  1.6402190 #> fitted.Predictor.042  1.4341379 0.009773367  1.4153408  1.4338301  1.4551962 #> fitted.Predictor.043  1.8023904 0.009745999  1.7811784  1.8026643  1.8211087 #> fitted.Predictor.044  1.3908397 0.009706034  1.3710528  1.3908056  1.4106554 #> fitted.Predictor.045  1.1975596 0.009743643  1.1786250  1.1973006  1.2183567 #> fitted.Predictor.046  1.3266907 0.009684842  1.3068049  1.3266901  1.3463359 #> fitted.Predictor.047  1.4088662 0.009696060  1.3893089  1.4087818  1.4288611 #> fitted.Predictor.048  1.6090869 0.009715349  1.5881207  1.6093202  1.6278999 #> fitted.Predictor.049  1.4315274 0.009767420  1.4127037  1.4312291  1.4525339 #> fitted.Predictor.050  1.7473688 0.009704980  1.7266649  1.7475477  1.7663654 #> fitted.Predictor.051  1.6843423 0.009688186  1.6648338  1.6842498  1.7043541 #> fitted.Predictor.052  1.7017560 0.009691422  1.6812688  1.7018918  1.7208896 #> fitted.Predictor.053  1.4663263 0.009778251  1.4475774  1.4660042  1.4874556 #> fitted.Predictor.054  1.7443764 0.009710133  1.7245438  1.7443512  1.7641648 #> fitted.Predictor.055  2.1608158 0.009724980  2.1398021  2.1610550  2.1796237 #> fitted.Predictor.056  2.0136657 0.009691087  1.9941186  2.0135813  2.0336515 #> fitted.Predictor.057  1.9579023 0.009728156  1.9388457  1.9576810  1.9785135 #> fitted.Predictor.058  2.1952830 0.009691182  2.1748910  2.1953969  2.2144989 #> fitted.Predictor.059  2.2021377 0.009690206  2.1817397  2.2022533  2.2213449 #> fitted.Predictor.060  1.9943806 0.009723016  1.9752903  1.9941700  2.0149377 #> fitted.Predictor.061  2.0483668 0.009708227  2.0289715  2.0482380  2.0685641 #> fitted.Predictor.062  2.3863738 0.009694688  2.3660330  2.3864741  2.4056474 #> fitted.Predictor.063  2.4209349 0.009694635  2.4003814  2.4210839  2.4400236 #> fitted.Predictor.064  2.1945890 0.009706797  2.1747163  2.1945749  2.2143279 #> fitted.Predictor.065  1.7729305 0.009795487  1.7541444  1.7726099  1.7940891 #> fitted.Predictor.066  2.3312350 0.009700197  2.3110028  2.3313077  2.3506243 #> fitted.Predictor.067  2.3823419 0.009708850  2.3616982  2.3825050  2.4014040 #> fitted.Predictor.068  1.8353996 0.009788730  1.8166232  1.8350795  1.8565412 #> fitted.Predictor.069  2.1156997 0.009720974  2.0946557  2.1159479  2.1344678 #> fitted.Predictor.070  1.9575063 0.009725013  1.9384501  1.9572861  1.9781054 #> fitted.Predictor.071  2.0491560 0.009712440  2.0283076  2.0493641  2.0680571 #> fitted.Predictor.072  1.6910388 0.009705436  1.6715289  1.6909388  1.7111146 #> fitted.Predictor.073  1.6043562 0.009688516  1.5843055  1.6043926  1.6238648 #> fitted.Predictor.074  1.3653138 0.009778262  1.3465407  1.3649977  1.3864172 #> fitted.Predictor.075  1.6739920 0.009743138  1.6528244  1.6742574  1.6927363 #> fitted.Predictor.076  1.1936161 0.009793843  1.1748223  1.1932981  1.2147596 #> fitted.Predictor.077  1.6540153 0.009749857  1.6327654  1.6542959  1.6727160 #> fitted.Predictor.078  1.2505413 0.009733415  1.2314455  1.2503271  1.2711332 #> fitted.Predictor.079  1.2907602 0.009682493  1.2710574  1.2907171  1.3105664 #> fitted.Predictor.080  1.3538139 0.009681519  1.3335586  1.3539009  1.3731145 #> fitted.Predictor.081  1.2889346 0.009686214  1.2693992  1.2888496  1.3089132 #> fitted.Predictor.082  1.2956111 0.009685011  1.2752328  1.2957250  1.3148161 #> fitted.Predictor.083  1.1089011 0.009770589  1.0901408  1.1085854  1.1299874 #> fitted.Predictor.084  1.3769005 0.009711330  1.3559997  1.3771208  1.3957540 #> fitted.Predictor.085  1.2699545 0.009697296  1.2498495  1.2699989  1.2894470 #> fitted.Predictor.086  0.8798326 0.009711970  0.8600213  0.8798016  0.8996476 #> fitted.Predictor.087  0.5583314 0.009732731  0.5392448  0.5581153  0.5789299 #> fitted.Predictor.088  0.6076184 0.009695077  0.5870581  0.6077693  0.6267018 #> fitted.Predictor.089  0.3944388 0.009780409  0.3756537  0.3941248  0.4155379 #> fitted.Predictor.090  0.8376912 0.009750647  0.8165002  0.8379582  0.8564427 #> fitted.Predictor.091  0.2054999 0.009793433  0.1866851  0.2051874  0.2266195 #> fitted.Predictor.092  0.6367510 0.009748674  0.6155352  0.6370245  0.6554752 #> fitted.Predictor.093  0.1918889 0.009792129  0.1731229  0.1915646  0.2130554 #> fitted.Predictor.094  0.5425481 0.009696552  0.5225424  0.5425701  0.5621271 #> fitted.Predictor.095  0.6667707 0.009700175  0.6471335  0.6667036  0.6867052 #> fitted.Predictor.096  0.9441966 0.009691308  0.9239598  0.9442747  0.9635491 #> fitted.Predictor.097  0.9900563 0.009713577  0.9706381  0.9899303  1.0102517 #> fitted.Predictor.098  1.4402617 0.009741807  1.4190881  1.4405290  1.4589966 #> fitted.Predictor.099  1.1550224 0.009766604  1.1362033  1.1547234  1.1760306 #> fitted.Predictor.100  1.3386092 0.009716574  1.3182113  1.3387128  1.3579112 #>                            mode #> fitted.Predictor.001 -0.9083827 #> fitted.Predictor.002 -0.5955986 #> fitted.Predictor.003 -0.7249010 #> fitted.Predictor.004 -0.6287696 #> fitted.Predictor.005 -1.0002048 #> fitted.Predictor.006 -0.5410226 #> fitted.Predictor.007 -1.0483932 #> fitted.Predictor.008 -1.1165587 #> fitted.Predictor.009 -0.7041640 #> fitted.Predictor.010 -0.6407918 #> fitted.Predictor.011 -0.6867896 #> fitted.Predictor.012 -0.7933975 #> fitted.Predictor.013 -0.4945542 #> fitted.Predictor.014 -0.9505934 #> fitted.Predictor.015 -0.2561301 #> fitted.Predictor.016 -0.3807576 #> fitted.Predictor.017 -1.1009969 #> fitted.Predictor.018 -0.7868076 #> fitted.Predictor.019 -0.8908125 #> fitted.Predictor.020 -0.4651777 #> fitted.Predictor.021 -3.9534051 #> fitted.Predictor.022 -3.5035199 #> fitted.Predictor.023 -4.0013817 #> fitted.Predictor.024 -3.6411307 #> fitted.Predictor.025 -3.6093078 #> fitted.Predictor.026 -3.3887395 #> fitted.Predictor.027 -3.5035475 #> fitted.Predictor.028 -3.6586365 #> fitted.Predictor.029 -3.6964468 #> fitted.Predictor.030 -3.8020962 #> fitted.Predictor.031 -3.5613037 #> fitted.Predictor.032 -3.5077064 #> fitted.Predictor.033 -3.7138343 #> fitted.Predictor.034 -3.7091068 #> fitted.Predictor.035 -3.8766515 #> fitted.Predictor.036 -4.0508223 #> fitted.Predictor.037 -3.6454279 #> fitted.Predictor.038 -3.3371999 #> fitted.Predictor.039 -3.9236145 #> fitted.Predictor.040 -3.5923847 #> fitted.Predictor.041  1.6214930 #> fitted.Predictor.042  1.4336261 #> fitted.Predictor.043  1.8028783 #> fitted.Predictor.044  1.3907989 #> fitted.Predictor.045  1.1971315 #> fitted.Predictor.046  1.3267082 #> fitted.Predictor.047  1.4087377 #> fitted.Predictor.048  1.6095067 #> fitted.Predictor.049  1.4310317 #> fitted.Predictor.050  1.7476951 #> fitted.Predictor.051  1.6841991 #> fitted.Predictor.052  1.7020088 #> fitted.Predictor.053  1.4657905 #> fitted.Predictor.054  1.7443510 #> fitted.Predictor.055  2.1612448 #> fitted.Predictor.056  2.0135377 #> fitted.Predictor.057  1.9575387 #> fitted.Predictor.058  2.1954970 #> fitted.Predictor.059  2.2023548 #> fitted.Predictor.060  1.9940355 #> fitted.Predictor.061  2.0481629 #> fitted.Predictor.062  2.3865640 #> fitted.Predictor.063  2.4212091 #> fitted.Predictor.064  2.1945825 #> fitted.Predictor.065  1.7723985 #> fitted.Predictor.066  2.3313777 #> fitted.Predictor.067  2.3826403 #> fitted.Predictor.068  1.8348675 #> fitted.Predictor.069  2.1161453 #> fitted.Predictor.070  1.9571431 #> fitted.Predictor.071  2.0495324 #> fitted.Predictor.072  1.6908835 #> fitted.Predictor.073  1.6044375 #> fitted.Predictor.074  1.3647883 #> fitted.Predictor.075  1.6744658 #> fitted.Predictor.076  1.1930880 #> fitted.Predictor.077  1.6545147 #> fitted.Predictor.078  1.2501900 #> fitted.Predictor.079  1.2907038 #> fitted.Predictor.080  1.3539819 #> fitted.Predictor.081  1.2888046 #> fitted.Predictor.082  1.2958262 #> fitted.Predictor.083  1.1083755 #> fitted.Predictor.084  1.3772977 #> fitted.Predictor.085  1.2700482 #> fitted.Predictor.086  0.8797971 #> fitted.Predictor.087  0.5579766 #> fitted.Predictor.088  0.6078974 #> fitted.Predictor.089  0.3939168 #> fitted.Predictor.090  0.8381672 #> fitted.Predictor.091  0.2049813 #> fitted.Predictor.092  0.6372385 #> fitted.Predictor.093  0.1913501 #> fitted.Predictor.094  0.5426043 #> fitted.Predictor.095  0.6666724 #> fitted.Predictor.096  0.9443494 #> fitted.Predictor.097  0.9898562 #> fitted.Predictor.098  1.4407387 #> fitted.Predictor.099  1.1545256 #> fitted.Predictor.100  1.3388057 #>  #> $marginal #> NULL #>   samples <- simulate(LnGM)"},{"path":"/reference/jumpts.html","id":null,"dir":"Reference","previous_headings":"","what":"Time series with 2 jumps â jumpts","title":"Time series with 2 jumps â jumpts","text":"Time series length 100 two distinct jumps.","code":""},{"path":"/reference/jumpts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time series with 2 jumps â jumpts","text":"","code":"jumpts"},{"path":"/reference/jumpts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Time series with 2 jumps â jumpts","text":"object class data.frame.","code":""},{"path":"/reference/mungeGibbs.mixing.html","id":null,"dir":"Reference","previous_headings":"","what":"Process ngvb.list when method = ","title":"Process ngvb.list when method = ","text":"Process ngvb.list method = \"Gibbs\". Produces matrix samples mixing variables \\(\\mathbf{V}\\).","code":""},{"path":"/reference/mungeGibbs.mixing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process ngvb.list when method = ","text":"","code":"# S4 method for ngvb.list mungeGibbs.mixing(object)"},{"path":"/reference/mungeGibbs.mixing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process ngvb.list when method = ","text":"object ngvb.list object (output ngvb function)","code":""},{"path":"/reference/mungeGibbs.mixing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process ngvb.list when method = ","text":"","code":"#Here we fit an RW1 latent process to the jumpts time series  plot(jumpts)    #Fit LGM with INLA  LGM     <- inla(y ~ -1 + f(x,  model = \"rw1\"),                  data = jumpts)   #Run 10 iterations from the Gibbs sampler  LnGM.Gibbs <- ngvb(fit = LGM, selection = list(x=1:100),                     method = \"Gibbs\", iter=10) #> [1] \"Warning: You need to add log(|D|) to mll: check inla.doc(generic0)\" #>  #> 0Oo----------- Iteration 1 -----------oO0 #> Initial value of eta: 0.5 #> Warning: longer object length is not a multiple of shorter object length #> Error in GIGrvg::rgig(n = 1, lambda = -N[[k]]/2 + 1, psi = 2 * alpha.etak,     chi = sum((Vk - hk)^2/Vk)): invalid parameters for GIG distribution: lambda=-49, chi=inf, psi=2   Gibbs.V    <- mungeGibbs.mixing(LnGM.Gibbs) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'mungeGibbs.mixing': object 'LnGM.Gibbs' not found   Gibbs.eta  <- mungeGibbs.ng(LnGM.Gibbs) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'mungeGibbs.ng': object 'LnGM.Gibbs' not found"},{"path":"/reference/mungeGibbs.ng.html","id":null,"dir":"Reference","previous_headings":"","what":"Process ngvb.list when method = ","title":"Process ngvb.list when method = ","text":"Process ngvb.list method = \"Gibbs\". Produces matrix samples non-Gaussianity parameter \\(\\eta\\).","code":""},{"path":"/reference/mungeGibbs.ng.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process ngvb.list when method = ","text":"","code":"# S4 method for ngvb.list mungeGibbs.ng(object)"},{"path":"/reference/mungeGibbs.ng.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process ngvb.list when method = ","text":"object ngvb.list object (output ngvb function)","code":""},{"path":"/reference/mungeGibbs.ng.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process ngvb.list when method = ","text":"","code":"#Here we fit an RW1 latent process to the jumpts time series  plot(jumpts)    #Fit LGM with INLA  LGM     <- inla(y ~ -1 + f(x,  model = \"rw1\"),                  data = jumpts)   #Run 10 iterations from the Gibbs sampler  LnGM.Gibbs <- ngvb(fit = LGM, selection = list(x=1:100),                     method = \"Gibbs\", iter=10) #> [1] \"Warning: You need to add log(|D|) to mll: check inla.doc(generic0)\" #>  #> 0Oo----------- Iteration 1 -----------oO0 #> Initial value of eta: 0.5 #> Warning: longer object length is not a multiple of shorter object length #> Error in GIGrvg::rgig(n = 1, lambda = -N[[k]]/2 + 1, psi = 2 * alpha.etak,     chi = sum((Vk - hk)^2/Vk)): invalid parameters for GIG distribution: lambda=-49, chi=inf, psi=2   Gibbs.V    <- mungeGibbs.mixing(LnGM.Gibbs) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'mungeGibbs.mixing': object 'LnGM.Gibbs' not found   Gibbs.eta  <- mungeGibbs.ng(LnGM.Gibbs) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'mungeGibbs.ng': object 'LnGM.Gibbs' not found"},{"path":"/reference/ngvb.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate inference of latent non-Gaussian models (LnGMs) â ngvb","title":"Approximate inference of latent non-Gaussian models (LnGMs) â ngvb","text":"Finds posterior distribution hyperparameters \\(\\boldsymbol{\\theta}\\), latent field \\(\\mathbf{x}\\), mixing variables \\(\\mathbf{V}\\), non-Gaussianity parameters \\(\\eta\\) latent non-Gaussian models (LnGMs) using INLA variational Bayes approximations. LnGMs flexible extensions latent Gaussian models (LGMs). LnGMs specified either INLA object (fit) fits LGM list configurations (manual.configs). Run `devtools::build_vignettes(\"ngvb\")` `vignette(\"ngvb\")` see several use cases.","code":""},{"path":"/reference/ngvb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate inference of latent non-Gaussian models (LnGMs) â ngvb","text":"","code":"ngvb(   fit = NULL,   manual.configs = NULL,   selection,   alpha.eta = rep(1, length(selection)),   n.sampling = 1000,   d.sampling = FALSE,   method = \"SCVI\",   fast = FALSE,   verbose = TRUE,   history = FALSE,   V.init = NULL,   eta.init = NULL,   iter = 10,   stop.rel.change = NULL )"},{"path":"/reference/ngvb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate inference of latent non-Gaussian models (LnGMs) â ngvb","text":"fit inla object fits LGM. manual.configs necessary fit provided. List containing: inla.fit.V Function receives input mixing variables \\(\\mathbf{V}\\)    output inla object fits LGM \\((\\mathbf{x},\\boldsymbol{\\theta} | \\mathbf{V}, \\mathbf{y})\\). Dfunc Function receives input hyperparameter vector \\(\\boldsymbol{\\theta}\\)     internal scale output \\(\\mathbf{D}(\\boldsymbol{\\theta})\\), \\(\\mathbf{D}\\) dependency matrix     specifies non-Gaussian latent field. one latent component     extended non-Gaussianity, list functions \\(\\mathbf{D}_i(\\boldsymbol{\\theta})\\),     \\(\\mathbf{D}_i(\\boldsymbol{\\theta})\\) dependency matrix specifies component . h Predefined constant \\(\\mathbf{h}\\) vector contains distance locations     area basis functions. models defined discrete space     vector ones. one latent component extended non-Gaussianity,     list vectors \\(\\mathbf{h_i}\\)     \\(\\mathbf{h_i}\\) predefined constant vector component . selection List specifies model components LGM extended non-Gaussianity. syntax argument selection function inla.posterior.sample. alpha.eta Numeric. Rate parameter exponential prior non-Gaussianity parameter \\(\\alpha\\). vector dimension number model components extend. n.sampling Numeric. Number samples uses several sampling task throughout SVI SCVI algorithm. d.sampling Logical. TRUE expectations \\(d_i = E([\\mathbf{D}\\mathbf{x}]_i^2)\\) computed sampling (slower). FALSE (default) uses mixture Gaussian approximation \\(\\mathbf{x}\\) obtained INLA. method Character. \"SCVI\", \"SVI\", \"Gibbs\" algorithm structural collapsed variational inference algorithm (faster) structural variational inference algorithm (slower), Gibbs sampler (even slower), respectively. fast Logical. TRUE INLA run empirical Bayes mode several control variables turned improve speed algorithm. verbose Logical. TRUE print posterior mean \\(\\eta\\) plot posterior mean \\(\\mathbf{V}\\) iteration. history Logical. TRUE save LGM inla object iteration. FALSE save LGM inla object last iteration. V.init List numeric vectors. Initial values \\(\\mathbf{V}\\). default \\(\\mathbf{V}=\\mathbf{h}\\). eta.init Numeric vector. Initial values \\(\\eta\\). default eta.init = 0.5. iter Integer. Maximum number iterations. stop.rel.change Numeric. Stop algorithm relative change posterior mean \\(\\eta\\) smaller stop.rel.change.","code":""},{"path":"/reference/ngvb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximate inference of latent non-Gaussian models (LnGMs) â ngvb","text":"S4 object containing outputs. Slots accessed @. : history List containing summaries inla objects (history = TRUE) iteration (except last one). LGM inla object containing summaries marginals latent field \\(\\mathbf{x}\\)    hyperparameters \\(\\boldsymbol{\\theta}\\) last iteration. summary.mixing Data frame containing summaries mixing variables \\(\\mathbf{V}\\). summary.ng Data frame containing summaries non-Gaussianiy parameters \\(\\eta\\). configs List containing LnGM model specifications","code":""},{"path":"/reference/ngvb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Approximate inference of latent non-Gaussian models (LnGMs) â ngvb","text":"","code":"#Here we fit an RW1 latent process to the jumpts time series  plot(jumpts)    #Fit LGM with INLA  LGM     <- inla(y ~ -1 + f(x,  model = \"rw1\"),                  data = jumpts)   #Fit LnGM with ngvb  LnGM <- ngvb(fit = LGM, selection = list(x=1:100)) #> [1] \"Warning: You need to add log(|D|) to mll: check inla.doc(generic0)\" #>  #> 0Oo----------- Iteration 1 -----------oO0 #> Initial value of eta: 0.5 #>  #> 0Oo----------- Iteration 2 -----------oO0 #> Expectation of eta: 4.859 #>  #> 0Oo----------- Iteration 3 -----------oO0 #> Expectation of eta: 3.975 #>  #> 0Oo----------- Iteration 4 -----------oO0 #> Expectation of eta: 3.425 #>  #> 0Oo----------- Iteration 5 -----------oO0 #> Expectation of eta: 3.037 #>  #> 0Oo----------- Iteration 6 -----------oO0 #> Expectation of eta: 2.806 #>  #> 0Oo----------- Iteration 7 -----------oO0 #> Expectation of eta: 2.632 #>  #> 0Oo----------- Iteration 8 -----------oO0 #> Expectation of eta: 2.494 #>  #> 0Oo----------- Iteration 9 -----------oO0 #> Expectation of eta: 2.426 #>  #> 0Oo----------- Iteration 10 -----------oO0 #> Expectation of eta: 2.374 #>  #>  0Oo----------- Maximum number of iterations reached -----------oO0   #Available methods  summary(LnGM) #>                                     mean        sd 0.025quant 0.5quant #> Non Gaussianity parameter for x 2.374016 0.7517121   1.174697  2.27336 #>                                 0.975quant #> Non Gaussianity parameter for x   4.166915 #>  #> Call: #>    c(\"inla.core(formula = formula, family = family, contrasts = contrasts,  #>    \", \" data = data, quantiles = quantiles, E = E, offset = offset, \", \"  #>    scale = scale, weights = weights, Ntrials = Ntrials, strata = strata,  #>    \", \" lp.scale = lp.scale, link.covariates = link.covariates, verbose =  #>    verbose, \", \" lincomb = lincomb, selection = selection, control.compute  #>    = control.compute, \", \" control.predictor = control.predictor,  #>    control.family = control.family, \", \" control.inla = control.inla,  #>    control.fixed = control.fixed, \", \" control.mode = control.mode,  #>    control.expert = control.expert, \", \" control.hazard = control.hazard,  #>    control.lincomb = control.lincomb, \", \" control.update =  #>    control.update, control.lp.scale = control.lp.scale, \", \"  #>    control.pardiso = control.pardiso, only.hyperparam = only.hyperparam,  #>    \", \" inla.call = inla.call, inla.arg = inla.arg, num.threads =  #>    num.threads, \", \" blas.num.threads = blas.num.threads, keep = keep,  #>    working.directory = working.directory, \", \" silent = silent, inla.mode  #>    = inla.mode, safe = FALSE, debug = debug, \", \" .parent.frame =  #>    .parent.frame)\")  #> Random effects: #>   Name\t  Model #>     x Generic0 model #>  #> Model hyperparameters: #>                                             mean       sd 0.025quant 0.5quant #> Precision for the Gaussian observations 18840.17 1.84e+04    1348.33 13312.12 #> Precision for x                             4.50 6.35e-01       3.36     4.47 #>                                         0.975quant    mode #> Precision for the Gaussian observations   68008.74 3750.03 #> Precision for x                               5.86    4.41 #>  #> Marginal log-Likelihood:  -76.53  #>  is computed  #> Posterior summaries for the linear predictor and the fitted values are computed #> (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)') #>   print(LnGM) #> Call: #>    c(\"inla.core(formula = formula, family = family, contrasts = contrasts,  #>    \", \" data = data, quantiles = quantiles, E = E, offset = offset, \", \"  #>    scale = scale, weights = weights, Ntrials = Ntrials, strata = strata,  #>    \", \" lp.scale = lp.scale, link.covariates = link.covariates, verbose =  #>    verbose, \", \" lincomb = lincomb, selection = selection, control.compute  #>    = control.compute, \", \" control.predictor = control.predictor,  #>    control.family = control.family, \", \" control.inla = control.inla,  #>    control.fixed = control.fixed, \", \" control.mode = control.mode,  #>    control.expert = control.expert, \", \" control.hazard = control.hazard,  #>    control.lincomb = control.lincomb, \", \" control.update =  #>    control.update, control.lp.scale = control.lp.scale, \", \"  #>    control.pardiso = control.pardiso, only.hyperparam = only.hyperparam,  #>    \", \" inla.call = inla.call, inla.arg = inla.arg, num.threads =  #>    num.threads, \", \" blas.num.threads = blas.num.threads, keep = keep,  #>    working.directory = working.directory, \", \" silent = silent, inla.mode  #>    = inla.mode, safe = FALSE, debug = debug, \", \" .parent.frame =  #>    .parent.frame)\")  #> Time used: #>   Pre = 0.487, Running = 0.143, Post = 0.124, Total = 0.755 #>  #>   #> ngvb Configurations:  #> $h #> $h[[1]] #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> [39] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> [77] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #>  #>  #> $alpha.eta #> [1] 1 #>  #> $method #> [1] \"SCVI\" #>  #> $N #> [1] 100 #>  #> $ncomp #> [1] 1 #>  #> $selection #> $selection$x #>   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18 #>  [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36 #>  [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54 #>  [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72 #>  [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90 #>  [91]  91  92  93  94  95  96  97  98  99 100 #>  #>  #> $n.sampling #> [1] 1000 #>  #> $inla.fit.V #> function(V, theta = NULL){ #>  #>     for(i in 1:ncomp){ #>  #>       #USE generic0 or cgeneric? #>       if(use.generic0[i]){ #If so you only need to define matrices Q and rankdefs #>         D <- D.config[[i]]$D #>  #>         assign(paste('VINIG.Q.',i,sep=\"\"), as(t(D)%*%Diagonal(length(V[[i]]),1/V[[i]])%*%D, \"dgTMatrix\"), envir = .GlobalEnv) #>  #>       }else if( model[i] == \"iid\") { #>         assign(\"V\", V, envir = .GlobalEnv) #>  #>       }else if (model[i] == \"ar1\"){ #If so you only need to define matrices Q and rankdefs #>  #>  #>         pcprior <- D.config[[i]]$pcprior #>  #>         folder  <- paste0(system.file(package = 'ngvb'),'/cfiles/') #>  #>         cmodel  <- inla.cgeneric.define(model = \"inla_cgeneric_ar1_model\", #>                                         shlib = paste0(folder,\"cgeneric-ngvb.so\"), #>                                         n     = N[[i]], #>                                         V     = V[[i]], #>                                         U1    = pcprior$U1, #>                                         alpha1= pcprior$alpha1, #>                                         U2    = pcprior$U2, #>                                         alpha2= pcprior$alpha2) #>  #>         assign(paste('rgeneric',i,sep=\"\"), cmodel, envir = .GlobalEnv) #>  #>       } #>  #>       #needed for sampling from x for a fixed value of theta #>       if(!is.null(theta)){ #>         arglist$control.mode = list(theta = theta, fixed = TRUE) #>       } #>  #>       fit       <- do.call(inla, arglist) #>       return(fit) #>     } #>  #>     return(inla.fit.V) #>   } #> <bytecode: 0x00000265f3513b80> #> <environment: 0x00000265ed13c878> #>   plot(LnGM)    fitted(LnGM) #> $summary #>                            mean          sd 0.025quant   0.5quant 0.975quant #> fitted.Predictor.001 -0.9080791 0.009750888 -0.9273469 -0.9082601 -0.8875791 #> fitted.Predictor.002 -0.5960370 0.009718248 -0.6170450 -0.5957982 -0.5772371 #> fitted.Predictor.003 -0.7245549 0.009720146 -0.7436406 -0.7247666 -0.7039914 #> fitted.Predictor.004 -0.6291457 0.009713491 -0.6500025 -0.6289384 -0.6102367 #> fitted.Predictor.005 -0.9996482 0.009796126 -1.0183975 -0.9999792 -0.9784344 #> fitted.Predictor.006 -0.5415137 0.009751356 -0.5627451 -0.5412406 -0.5227813 #> fitted.Predictor.007 -1.0482271 0.009712149 -1.0677267 -1.0483339 -1.0281030 #> fitted.Predictor.008 -1.1161828 0.009740866 -1.1352367 -1.1164116 -1.0955057 #> fitted.Predictor.009 -0.7042773 0.009696263 -0.7244447 -0.7042196 -0.6848325 #> fitted.Predictor.010 -0.6409444 0.009679041 -0.6611625 -0.6408671 -0.6216075 #> fitted.Predictor.011 -0.6868451 0.009682279 -0.7068194 -0.6868256 -0.6672777 #> fitted.Predictor.012 -0.7929736 0.009747799 -0.8119365 -0.7932285 -0.7721762 #> fitted.Predictor.013 -0.4950489 0.009745091 -0.5162771 -0.4947734 -0.4763360 #> fitted.Predictor.014 -0.9500638 0.009796957 -0.9688691 -0.9503811 -0.9289063 #> fitted.Predictor.015 -0.2565048 0.009723616 -0.2773931 -0.2562955 -0.2375856 #> fitted.Predictor.016 -0.3807978 0.009706542 -0.4007904 -0.3807856 -0.3611571 #> fitted.Predictor.017 -1.1005024 0.009787993 -1.1193418 -1.1008068 -1.0794168 #> fitted.Predictor.018 -0.7871791 0.009711573 -0.8080307 -0.7869721 -0.7682726 #> fitted.Predictor.019 -0.8903643 0.009754009 -0.9092942 -0.8906304 -0.8695084 #> fitted.Predictor.020 -0.4655515 0.009742247 -0.4864608 -0.4653462 -0.4465842 #> fitted.Predictor.021 -3.9529843 0.009777234 -3.9720171 -3.9532353 -3.9321432 #> fitted.Predictor.022 -3.5039989 0.009749622 -3.5252000 -3.5037317 -3.4852478 #> fitted.Predictor.023 -4.0008717 0.009790254 -4.0196808 -4.0011848 -3.9797450 #> fitted.Predictor.024 -3.6412913 0.009693433 -3.6615773 -3.6412046 -3.6219626 #> fitted.Predictor.025 -3.6090947 0.009702068 -3.6284747 -3.6092260 -3.5888930 #> fitted.Predictor.026 -3.3891308 0.009708147 -3.4100003 -3.3889185 -3.3702507 #> fitted.Predictor.027 -3.5035385 0.009689168 -3.5234068 -3.5035473 -3.4838483 #> fitted.Predictor.028 -3.6584929 0.009696510 -3.6779994 -3.6585910 -3.6384348 #> fitted.Predictor.029 -3.6965153 0.009680421 -3.7165173 -3.6964883 -3.6769802 #> fitted.Predictor.030 -3.8016434 0.009745882 -3.8205595 -3.8019090 -3.7808050 #> fitted.Predictor.031 -3.5614670 0.009687943 -3.5817061 -3.5613889 -3.5421164 #> fitted.Predictor.032 -3.5079988 0.009695275 -3.5286078 -3.5078395 -3.4889438 #> fitted.Predictor.033 -3.7135741 0.009709790 -3.7328497 -3.7137343 -3.6932404 #> fitted.Predictor.034 -3.7092857 0.009685745 -3.7296026 -3.7091885 -3.6900120 #> fitted.Predictor.035 -3.8766360 0.009693908 -3.8964562 -3.8766581 -3.8568839 #> fitted.Predictor.036 -4.0503409 0.009770783 -4.0691852 -4.0506361 -4.0293287 #> fitted.Predictor.037 -3.6453649 0.009712584 -3.6651449 -3.6454054 -3.6255055 #> fitted.Predictor.038 -3.3377023 0.009748337 -3.3589556 -3.3374230 -3.3189981 #> fitted.Predictor.039 -3.9230939 0.009792597 -3.9418821 -3.9234135 -3.9019356 #> fitted.Predictor.040 -3.5925010 0.009722493 -3.6127352 -3.5924399 -3.5730203 #> fitted.Predictor.041  1.6211798 0.009725298  1.6004488  1.6213530  1.6402375 #> fitted.Predictor.042  1.4341217 0.009772110  1.4153017  1.4338197  1.4551644 #> fitted.Predictor.043  1.8024011 0.009746014  1.7811932  1.8026714  1.8211342 #> fitted.Predictor.044  1.3908578 0.009707958  1.3710919  1.3908163  1.4107130 #> fitted.Predictor.045  1.1975597 0.009743967  1.1786239  1.1973000  1.2183702 #> fitted.Predictor.046  1.3266786 0.009683898  1.3067666  1.3266828  1.3463087 #> fitted.Predictor.047  1.4088704 0.009696598  1.3893139  1.4087841  1.4288810 #> fitted.Predictor.048  1.6091015 0.009715821  1.5881461  1.6093297  1.6279366 #> fitted.Predictor.049  1.4315082 0.009766597  1.4126560  1.4312168  1.4524950 #> fitted.Predictor.050  1.7473716 0.009705933  1.7266582  1.7475499  1.7663752 #> fitted.Predictor.051  1.6843396 0.009689474  1.6648195  1.6842479  1.7043580 #> fitted.Predictor.052  1.7017585 0.009692470  1.6812623  1.7018938  1.7208999 #> fitted.Predictor.053  1.4663207 0.009778406  1.4475633  1.4660000  1.4874551 #> fitted.Predictor.054  1.7443639 0.009711045  1.7245014  1.7443438  1.7641407 #> fitted.Predictor.055  2.1608329 0.009724618  2.1398368  2.1610659  2.1796657 #> fitted.Predictor.056  2.0136685 0.009692651  1.9941181  2.0135828  2.0336699 #> fitted.Predictor.057  1.9578899 0.009728574  1.9388108  1.9576730  1.9784932 #> fitted.Predictor.058  2.1952927 0.009690818  2.1749076  2.1954030  2.2145253 #> fitted.Predictor.059  2.2021335 0.009689610  2.1817189  2.2022512  2.2213359 #> fitted.Predictor.060  1.9943748 0.009724996  1.9752697  1.9941660  2.0149379 #> fitted.Predictor.061  2.0483672 0.009711469  2.0289624  2.0482379  2.0685806 #> fitted.Predictor.062  2.3863864 0.009694000  2.3660591  2.3864818  2.4056814 #> fitted.Predictor.063  2.4209480 0.009694236  2.4004069  2.4210922  2.4400579 #> fitted.Predictor.064  2.1945516 0.009706822  2.1746070  2.1945526  2.2142371 #> fitted.Predictor.065  1.7729354 0.009796976  1.7541550  1.7726119  1.7941197 #> fitted.Predictor.066  2.3312498 0.009701382  2.3110316  2.3313167  2.3506682 #> fitted.Predictor.067  2.3823423 0.009709877  2.3616853  2.3825057  2.4014085 #> fitted.Predictor.068  1.8354006 0.009789823  1.8166248  1.8350792  1.8565609 #> fitted.Predictor.069  2.1157136 0.009721441  2.0946790  2.1159570  2.1345025 #> fitted.Predictor.070  1.9574959 0.009725115  1.9384213  1.9572792  1.9780900 #> fitted.Predictor.071  2.0491618 0.009712575  2.0283105  2.0493681  2.0680725 #> fitted.Predictor.072  1.6910375 0.009707286  1.6715172  1.6909377  1.7111232 #> fitted.Predictor.073  1.6043430 0.009689748  1.5842584  1.6043848  1.6238378 #> fitted.Predictor.074  1.3653239 0.009780340  1.3465636  1.3650029  1.3864628 #> fitted.Predictor.075  1.6739600 0.009746779  1.6527117  1.6742392  1.6926623 #> fitted.Predictor.076  1.1936219 0.009795640  1.1748347  1.1933007  1.2147933 #> fitted.Predictor.077  1.6540334 0.009749052  1.6328031  1.6543074  1.6727585 #> fitted.Predictor.078  1.2505461 0.009734467  1.2314545  1.2503294  1.2711597 #> fitted.Predictor.079  1.2907616 0.009682599  1.2710548  1.2907179  1.3105771 #> fitted.Predictor.080  1.3538009 0.009679698  1.3335169  1.3538933  1.3730817 #> fitted.Predictor.081  1.2889454 0.009686886  1.2694218  1.2888558  1.3089506 #> fitted.Predictor.082  1.2956257 0.009687826  1.2752562  1.2957341  1.3148606 #> fitted.Predictor.083  1.1088752 0.009768633  1.0900780  1.1085690  1.1299281 #> fitted.Predictor.084  1.3769118 0.009711504  1.3560170  1.3771282  1.3957825 #> fitted.Predictor.085  1.2699609 0.009697891  1.2498573  1.2700028  1.2894692 #> fitted.Predictor.086  0.8798313 0.009712855  0.8600094  0.8798008  0.8996525 #> fitted.Predictor.087  0.5583310 0.009732601  0.5392420  0.5581146  0.5789399 #> fitted.Predictor.088  0.6076209 0.009695001  0.5870539  0.6077713  0.6267101 #> fitted.Predictor.089  0.3944243 0.009779435  0.3756184  0.3941153  0.4155111 #> fitted.Predictor.090  0.8376905 0.009751656  0.8164813  0.8379586  0.8564420 #> fitted.Predictor.091  0.2055154 0.009796654  0.1867202  0.2051957  0.2266824 #> fitted.Predictor.092  0.6367507 0.009749552  0.6155175  0.6370251  0.6554751 #> fitted.Predictor.093  0.1918832 0.009792208  0.1731089  0.1915604  0.2130547 #> fitted.Predictor.094  0.5425398 0.009697950  0.5225089  0.5425652  0.5621136 #> fitted.Predictor.095  0.6667919 0.009702197  0.6471811  0.6667161  0.6867719 #> fitted.Predictor.096  0.9441811 0.009692482  0.9239054  0.9442657  0.9635156 #> fitted.Predictor.097  0.9900797 0.009716428  0.9706911  0.9899439  1.0103279 #> fitted.Predictor.098  1.4402160 0.009746306  1.4189351  1.4405026  1.4588903 #> fitted.Predictor.099  1.1550513 0.009770775  1.1362707  1.1547399  1.1761303 #> fitted.Predictor.100  1.3386058 0.009717070  1.3181909  1.3387110  1.3579068 #>                            mode #> fitted.Predictor.001 -0.9083722 #> fitted.Predictor.002 -0.5956085 #> fitted.Predictor.003 -0.7249029 #> fitted.Predictor.004 -0.6287711 #> fitted.Predictor.005 -1.0001977 #> fitted.Predictor.006 -0.5410282 #> fitted.Predictor.007 -1.0483927 #> fitted.Predictor.008 -1.1165580 #> fitted.Predictor.009 -0.7041604 #> fitted.Predictor.010 -0.6407939 #> fitted.Predictor.011 -0.6867935 #> fitted.Predictor.012 -0.7933941 #> fitted.Predictor.013 -0.4945588 #> fitted.Predictor.014 -0.9505894 #> fitted.Predictor.015 -0.2561280 #> fitted.Predictor.016 -0.3807595 #> fitted.Predictor.017 -1.1010062 #> fitted.Predictor.018 -0.7868047 #> fitted.Predictor.019 -0.8908043 #> fitted.Predictor.020 -0.4651818 #> fitted.Predictor.021 -3.9533968 #> fitted.Predictor.022 -3.5035233 #> fitted.Predictor.023 -4.0013905 #> fitted.Predictor.024 -3.6411237 #> fitted.Predictor.025 -3.6093040 #> fitted.Predictor.026 -3.3887482 #> fitted.Predictor.027 -3.5035364 #> fitted.Predictor.028 -3.6586443 #> fitted.Predictor.029 -3.6964501 #> fitted.Predictor.030 -3.8020823 #> fitted.Predictor.031 -3.5613149 #> fitted.Predictor.032 -3.5077071 #> fitted.Predictor.033 -3.7138330 #> fitted.Predictor.034 -3.7091002 #> fitted.Predictor.035 -3.8766559 #> fitted.Predictor.036 -4.0508292 #> fitted.Predictor.037 -3.6454170 #> fitted.Predictor.038 -3.3372062 #> fitted.Predictor.039 -3.9236235 #> fitted.Predictor.040 -3.5923779 #> fitted.Predictor.041  1.6214953 #> fitted.Predictor.042  1.4336207 #> fitted.Predictor.043  1.8028820 #> fitted.Predictor.044  1.3908043 #> fitted.Predictor.045  1.1971312 #> fitted.Predictor.046  1.3267045 #> fitted.Predictor.047  1.4087388 #> fitted.Predictor.048  1.6095117 #> fitted.Predictor.049  1.4310253 #> fitted.Predictor.050  1.7476963 #> fitted.Predictor.051  1.6841981 #> fitted.Predictor.052  1.7020098 #> fitted.Predictor.053  1.4657883 #> fitted.Predictor.054  1.7443474 #> fitted.Predictor.055  2.1612504 #> fitted.Predictor.056  2.0135384 #> fitted.Predictor.057  1.9575346 #> fitted.Predictor.058  2.1955001 #> fitted.Predictor.059  2.2023537 #> fitted.Predictor.060  1.9940334 #> fitted.Predictor.061  2.0481628 #> fitted.Predictor.062  2.3865680 #> fitted.Predictor.063  2.4212133 #> fitted.Predictor.064  2.1945711 #> fitted.Predictor.065  1.7723995 #> fitted.Predictor.066  2.3313823 #> fitted.Predictor.067  2.3826407 #> fitted.Predictor.068  1.8348673 #> fitted.Predictor.069  2.1161500 #> fitted.Predictor.070  1.9571395 #> fitted.Predictor.071  2.0495345 #> fitted.Predictor.072  1.6908829 #> fitted.Predictor.073  1.6044336 #> fitted.Predictor.074  1.3647909 #> fitted.Predictor.075  1.6744565 #> fitted.Predictor.076  1.1930893 #> fitted.Predictor.077  1.6545207 #> fitted.Predictor.078  1.2501911 #> fitted.Predictor.079  1.2907042 #> fitted.Predictor.080  1.3539781 #> fitted.Predictor.081  1.2888078 #> fitted.Predictor.082  1.2958310 #> fitted.Predictor.083  1.1083669 #> fitted.Predictor.084  1.3773016 #> fitted.Predictor.085  1.2700502 #> fitted.Predictor.086  0.8797967 #> fitted.Predictor.087  0.5579762 #> fitted.Predictor.088  0.6078985 #> fitted.Predictor.089  0.3939118 #> fitted.Predictor.090  0.8381675 #> fitted.Predictor.091  0.2049855 #> fitted.Predictor.092  0.6372388 #> fitted.Predictor.093  0.1913479 #> fitted.Predictor.094  0.5426019 #> fitted.Predictor.095  0.6666787 #> fitted.Predictor.096  0.9443449 #> fitted.Predictor.097  0.9898631 #> fitted.Predictor.098  1.4407251 #> fitted.Predictor.099  1.1545341 #> fitted.Predictor.100  1.3388049 #>  #> $marginal #> NULL #>   samples <- simulate(LnGM)"},{"path":"/reference/ngvb.list-class.html","id":null,"dir":"Reference","previous_headings":"","what":"This class stores the output of the ngvb function. â ngvb.list-class","title":"This class stores the output of the ngvb function. â ngvb.list-class","text":"class stores output ngvb function.","code":""},{"path":"/reference/ngvb.list-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"This class stores the output of the ngvb function. â ngvb.list-class","text":"history List containing summaries model iteration. LGM inla object containing summaries marginals latent field \\(\\mathbf{x}\\) hyperparameters \\(\\boldsymbol{\\theta}\\) last iteration. summary.mixing Data frame containing summaries mixing variables \\(\\mathbf{V}\\) (last iteration). summary.ng Data frame containing summaries non-Gaussianiy parameters \\(\\eta\\) (last iteration). configs List containing LnGM model specifications.","code":""},{"path":"/reference/Orthodont.html","id":null,"dir":"Reference","previous_headings":"","what":"Data of an orthodontic study. â Orthodont","title":"Data of an orthodontic study. â Orthodont","text":"Original dataset potthoffroy package mice. Modified used INLA.","code":""},{"path":"/reference/Orthodont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data of an orthodontic study. â Orthodont","text":"","code":"Orthodont"},{"path":"/reference/Orthodont.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data of an orthodontic study. â Orthodont","text":"object class data.frame.","code":""},{"path":"/reference/Orthodont.plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Data of an orthodontic study. â Orthodont.plot","title":"Data of an orthodontic study. â Orthodont.plot","text":"Original dataset potthoffroy package mice. Modified wield Trellis plot.","code":""},{"path":"/reference/Orthodont.plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data of an orthodontic study. â Orthodont.plot","text":"","code":"Orthodont"},{"path":"/reference/Orthodont.plot.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data of an orthodontic study. â Orthodont.plot","text":"object class data.frame.","code":""},{"path":"/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots several summaries of an ngvb.list object. â plot,ngvb.list,missing-method","title":"Plots several summaries of an ngvb.list object. â plot,ngvb.list,missing-method","text":"Plots several summaries ngvb.list object.","code":""},{"path":"/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots several summaries of an ngvb.list object. â plot,ngvb.list,missing-method","text":"","code":"# S4 method for ngvb.list,missing plot(x, y, ...)"},{"path":"/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots several summaries of an ngvb.list object. â plot,ngvb.list,missing-method","text":"x ngvb.list object (output ngvb function) y used. ... Extra arguments used plot(x@LGM, ...) x@LGM inla object.","code":""},{"path":"/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots several summaries of an ngvb.list object. â plot,ngvb.list,missing-method","text":"","code":"#Here we fit an RW1 latent process to the jumpts time series  plot(jumpts)    #Fit LGM with INLA  LGM     <- inla(y ~ -1 + f(x,  model = \"rw1\"),                  data = jumpts)   #Fit LnGM with ngvb  LnGM <- ngvb(fit = LGM, selection = list(x=1:100)) #> [1] \"Warning: You need to add log(|D|) to mll: check inla.doc(generic0)\" #>  #> 0Oo----------- Iteration 1 -----------oO0 #> Initial value of eta: 0.5 #>  #> 0Oo----------- Iteration 2 -----------oO0 #> Expectation of eta: 4.865 #>  #> 0Oo----------- Iteration 3 -----------oO0 #> Expectation of eta: 4.022 #>  #> 0Oo----------- Iteration 4 -----------oO0 #> Expectation of eta: 3.444 #>  #> 0Oo----------- Iteration 5 -----------oO0 #> Expectation of eta: 3.1 #>  #> 0Oo----------- Iteration 6 -----------oO0 #> Expectation of eta: 2.813 #>  #> 0Oo----------- Iteration 7 -----------oO0 #> Expectation of eta: 2.637 #>  #> 0Oo----------- Iteration 8 -----------oO0 #> Expectation of eta: 2.496 #>  #> 0Oo----------- Iteration 9 -----------oO0 #> Expectation of eta: 2.487 #>  #>  0Oo----------- Convergence achieved -----------oO0   #Available methods  summary(LnGM) #>                                     mean        sd 0.025quant 0.5quant #> Non Gaussianity parameter for x 2.487223 0.7983026   1.276026 2.372349 #>                                 0.975quant #> Non Gaussianity parameter for x   4.357385 #>  #> Call: #>    c(\"inla.core(formula = formula, family = family, contrasts = contrasts,  #>    \", \" data = data, quantiles = quantiles, E = E, offset = offset, \", \"  #>    scale = scale, weights = weights, Ntrials = Ntrials, strata = strata,  #>    \", \" lp.scale = lp.scale, link.covariates = link.covariates, verbose =  #>    verbose, \", \" lincomb = lincomb, selection = selection, control.compute  #>    = control.compute, \", \" control.predictor = control.predictor,  #>    control.family = control.family, \", \" control.inla = control.inla,  #>    control.fixed = control.fixed, \", \" control.mode = control.mode,  #>    control.expert = control.expert, \", \" control.hazard = control.hazard,  #>    control.lincomb = control.lincomb, \", \" control.update =  #>    control.update, control.lp.scale = control.lp.scale, \", \"  #>    control.pardiso = control.pardiso, only.hyperparam = only.hyperparam,  #>    \", \" inla.call = inla.call, inla.arg = inla.arg, num.threads =  #>    num.threads, \", \" blas.num.threads = blas.num.threads, keep = keep,  #>    working.directory = working.directory, \", \" silent = silent, inla.mode  #>    = inla.mode, safe = FALSE, debug = debug, \", \" .parent.frame =  #>    .parent.frame)\")  #> Random effects: #>   Name\t  Model #>     x Generic0 model #>  #> Model hyperparameters: #>                                             mean       sd 0.025quant 0.5quant #> Precision for the Gaussian observations 18788.75 18412.83    1353.84 13271.44 #> Precision for x                             4.47     0.63       3.33     4.43 #>                                         0.975quant    mode #> Precision for the Gaussian observations   67880.76 3770.14 #> Precision for x                               5.81    4.37 #>  #> Marginal log-Likelihood:  -76.96  #>  is computed  #> Posterior summaries for the linear predictor and the fitted values are computed #> (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)') #>   print(LnGM) #> Call: #>    c(\"inla.core(formula = formula, family = family, contrasts = contrasts,  #>    \", \" data = data, quantiles = quantiles, E = E, offset = offset, \", \"  #>    scale = scale, weights = weights, Ntrials = Ntrials, strata = strata,  #>    \", \" lp.scale = lp.scale, link.covariates = link.covariates, verbose =  #>    verbose, \", \" lincomb = lincomb, selection = selection, control.compute  #>    = control.compute, \", \" control.predictor = control.predictor,  #>    control.family = control.family, \", \" control.inla = control.inla,  #>    control.fixed = control.fixed, \", \" control.mode = control.mode,  #>    control.expert = control.expert, \", \" control.hazard = control.hazard,  #>    control.lincomb = control.lincomb, \", \" control.update =  #>    control.update, control.lp.scale = control.lp.scale, \", \"  #>    control.pardiso = control.pardiso, only.hyperparam = only.hyperparam,  #>    \", \" inla.call = inla.call, inla.arg = inla.arg, num.threads =  #>    num.threads, \", \" blas.num.threads = blas.num.threads, keep = keep,  #>    working.directory = working.directory, \", \" silent = silent, inla.mode  #>    = inla.mode, safe = FALSE, debug = debug, \", \" .parent.frame =  #>    .parent.frame)\")  #> Time used: #>   Pre = 0.493, Running = 0.142, Post = 0.128, Total = 0.764 #>  #>   #> ngvb Configurations:  #> $h #> $h[[1]] #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> [39] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> [77] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #>  #>  #> $alpha.eta #> [1] 1 #>  #> $method #> [1] \"SCVI\" #>  #> $N #> [1] 100 #>  #> $ncomp #> [1] 1 #>  #> $selection #> $selection$x #>   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18 #>  [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36 #>  [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54 #>  [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72 #>  [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90 #>  [91]  91  92  93  94  95  96  97  98  99 100 #>  #>  #> $n.sampling #> [1] 1000 #>  #> $inla.fit.V #> function(V, theta = NULL){ #>  #>     for(i in 1:ncomp){ #>  #>       #USE generic0 or cgeneric? #>       if(use.generic0[i]){ #If so you only need to define matrices Q and rankdefs #>         D <- D.config[[i]]$D #>  #>         assign(paste('VINIG.Q.',i,sep=\"\"), as(t(D)%*%Diagonal(length(V[[i]]),1/V[[i]])%*%D, \"dgTMatrix\"), envir = .GlobalEnv) #>  #>       }else if( model[i] == \"iid\") { #>         assign(\"V\", V, envir = .GlobalEnv) #>  #>       }else if (model[i] == \"ar1\"){ #If so you only need to define matrices Q and rankdefs #>  #>  #>         pcprior <- D.config[[i]]$pcprior #>  #>         folder  <- paste0(system.file(package = 'ngvb'),'/cfiles/') #>  #>         cmodel  <- inla.cgeneric.define(model = \"inla_cgeneric_ar1_model\", #>                                         shlib = paste0(folder,\"cgeneric-ngvb.so\"), #>                                         n     = N[[i]], #>                                         V     = V[[i]], #>                                         U1    = pcprior$U1, #>                                         alpha1= pcprior$alpha1, #>                                         U2    = pcprior$U2, #>                                         alpha2= pcprior$alpha2) #>  #>         assign(paste('rgeneric',i,sep=\"\"), cmodel, envir = .GlobalEnv) #>  #>       } #>  #>       #needed for sampling from x for a fixed value of theta #>       if(!is.null(theta)){ #>         arglist$control.mode = list(theta = theta, fixed = TRUE) #>       } #>  #>       fit       <- do.call(inla, arglist) #>       return(fit) #>     } #>  #>     return(inla.fit.V) #>   } #> <bytecode: 0x00000265f3513b80> #> <environment: 0x00000265efd10d18> #>   plot(LnGM)    fitted(LnGM) #> $summary #>                            mean          sd 0.025quant   0.5quant 0.975quant #> fitted.Predictor.001 -0.9080844 0.009740415 -0.9273368 -0.9082625 -0.8876296 #> fitted.Predictor.002 -0.5960120 0.009708047 -0.6169346 -0.5957843 -0.5771944 #> fitted.Predictor.003 -0.7245738 0.009709916 -0.7436672 -0.7247771 -0.7040777 #> fitted.Predictor.004 -0.6291389 0.009703078 -0.6499436 -0.6289354 -0.6102405 #> fitted.Predictor.005 -0.9996693 0.009782623 -1.0184283 -0.9999903 -0.9785404 #> fitted.Predictor.006 -0.5415071 0.009740467 -0.5626822 -0.5412380 -0.5227839 #> fitted.Predictor.007 -1.0482265 0.009701060 -1.0676967 -1.0483331 -1.0281358 #> fitted.Predictor.008 -1.1161621 0.009731976 -1.1351633 -1.1163982 -1.0954860 #> fitted.Predictor.009 -0.7042946 0.009686556 -0.7244596 -0.7042303 -0.6849016 #> fitted.Predictor.010 -0.6409424 0.009669765 -0.6611248 -0.6408662 -0.6216259 #> fitted.Predictor.011 -0.6868542 0.009671442 -0.7068106 -0.6868313 -0.6673292 #> fitted.Predictor.012 -0.7929476 0.009739568 -0.8118522 -0.7932117 -0.7721425 #> fitted.Predictor.013 -0.4950499 0.009734620 -0.5162364 -0.4947754 -0.4763567 #> fitted.Predictor.014 -0.9500935 0.009782203 -0.9689196 -0.9503973 -0.9290374 #> fitted.Predictor.015 -0.2564921 0.009712643 -0.2773160 -0.2562891 -0.2375754 #> fitted.Predictor.016 -0.3807796 0.009697192 -0.4007110 -0.3807749 -0.3611366 #> fitted.Predictor.017 -1.1005029 0.009777100 -1.1193233 -1.1008056 -1.0794610 #> fitted.Predictor.018 -0.7871967 0.009702280 -0.8080412 -0.7869836 -0.7683347 #> fitted.Predictor.019 -0.8903578 0.009744580 -0.9092586 -0.8906253 -0.8695291 #> fitted.Predictor.020 -0.4655566 0.009732237 -0.4864354 -0.4653502 -0.4466169 #> fitted.Predictor.021 -3.9530023 0.009764906 -3.9720395 -3.9532449 -3.9322345 #> fitted.Predictor.022 -3.5039884 0.009738439 -3.5251257 -3.5037268 -3.4852414 #> fitted.Predictor.023 -4.0008450 0.009783567 -4.0195996 -4.0011675 -3.9797075 #> fitted.Predictor.024 -3.6413161 0.009684938 -3.6616140 -3.6412199 -3.6220470 #> fitted.Predictor.025 -3.6090736 0.009694460 -3.6283983 -3.6092127 -3.5888667 #> fitted.Predictor.026 -3.3891439 0.009698774 -3.4099983 -3.3889274 -3.3703018 #> fitted.Predictor.027 -3.5035616 0.009677903 -3.5234366 -3.5035611 -3.4839382 #> fitted.Predictor.028 -3.6584793 0.009684627 -3.6779334 -3.6585823 -3.6384354 #> fitted.Predictor.029 -3.6965120 0.009669118 -3.7164739 -3.6964865 -3.6770008 #> fitted.Predictor.030 -3.8016577 0.009734414 -3.8205739 -3.8019163 -3.7808848 #> fitted.Predictor.031 -3.5614496 0.009678062 -3.5816251 -3.5613789 -3.5420969 #> fitted.Predictor.032 -3.5080158 0.009684879 -3.5286161 -3.5078505 -3.4890084 #> fitted.Predictor.033 -3.7135598 0.009700065 -3.7327888 -3.7137250 -3.6932371 #> fitted.Predictor.034 -3.7092939 0.009675239 -3.7295890 -3.7091940 -3.6900574 #> fitted.Predictor.035 -3.8766251 0.009684048 -3.8963972 -3.8766515 -3.8568842 #> fitted.Predictor.036 -4.0503294 0.009762157 -4.0691390 -4.0506278 -4.0293353 #> fitted.Predictor.037 -3.6454083 0.009701906 -3.6652315 -3.6454311 -3.6256482 #> fitted.Predictor.038 -3.3376643 0.009735051 -3.3587993 -3.3374017 -3.3189270 #> fitted.Predictor.039 -3.9231123 0.009779620 -3.9419063 -3.9234229 -3.9020324 #> fitted.Predictor.040 -3.5924893 0.009712710 -3.6126702 -3.5924332 -3.5730155 #> fitted.Predictor.041  1.6211781 0.009715403  1.6004820  1.6213511  1.6402122 #> fitted.Predictor.042  1.4341392 0.009764150  1.4153616  1.4338315  1.4551746 #> fitted.Predictor.043  1.8023735 0.009738012  1.7811542  1.8026537  1.8210521 #> fitted.Predictor.044  1.3908545 0.009696905  1.3711140  1.3908145  1.4106729 #> fitted.Predictor.045  1.1975764 0.009735023  1.1786855  1.1973112  1.2183780 #> fitted.Predictor.046  1.3266797 0.009672613  1.3068032  1.3266834  1.3462817 #> fitted.Predictor.047  1.4088622 0.009685357  1.3893214  1.4087796  1.4288259 #> fitted.Predictor.048  1.6090974 0.009705831  1.5881753  1.6093261  1.6279076 #> fitted.Predictor.049  1.4315134 0.009756788  1.4126879  1.4312213  1.4524690 #> fitted.Predictor.050  1.7473664 0.009695249  1.7266837  1.7475458  1.7663402 #> fitted.Predictor.051  1.6843455 0.009678368  1.6648636  1.6842518  1.7043391 #> fitted.Predictor.052  1.7017656 0.009682070  1.6813192  1.7018974  1.7208947 #> fitted.Predictor.053  1.4663102 0.009766860  1.4475569  1.4659951  1.4873824 #> fitted.Predictor.054  1.7443742 0.009701293  1.7245585  1.7443500  1.7641389 #> fitted.Predictor.055  2.1608261 0.009715028  2.1398576  2.1610607  2.1796305 #> fitted.Predictor.056  2.0136684 0.009683345  1.9941437  2.0135831  2.0336398 #> fitted.Predictor.057  1.9579103 0.009720273  1.9388825  1.9576862  1.9785134 #> fitted.Predictor.058  2.1952702 0.009680976  2.1748811  2.1953890  2.2144456 #> fitted.Predictor.059  2.2021117 0.009679664  2.1816946  2.2022375  2.2212581 #> fitted.Predictor.060  1.9944022 0.009715599  1.9753616  1.9941834  2.0149741 #> fitted.Predictor.061  2.0483482 0.009699184  2.0289418  2.0482271  2.0684936 #> fitted.Predictor.062  2.3863997 0.009684190  2.3661296  2.3864893  2.4056912 #> fitted.Predictor.063  2.4209300 0.009684161  2.4003947  2.4210806  2.4399907 #> fitted.Predictor.064  2.1946057 0.009698357  2.1747813  2.1945848  2.2143515 #> fitted.Predictor.065  1.7729124 0.009783395  1.7541199  1.7725997  1.7940090 #> fitted.Predictor.066  2.3312448 0.009688974  2.3110559  2.3313134  2.3506255 #> fitted.Predictor.067  2.3823327 0.009698206  2.3616998  2.3824992  2.4013600 #> fitted.Predictor.068  1.8353733 0.009776071  1.8165790  1.8350644  1.8564386 #> fitted.Predictor.069  2.1157355 0.009710016  2.0947840  2.1159689  2.1345358 #> fitted.Predictor.070  1.9575012 0.009715382  1.9384562  1.9572833  1.9780674 #> fitted.Predictor.071  2.0491593 0.009702678  2.0283428  2.0493656  2.0680466 #> fitted.Predictor.072  1.6910336 0.009696120  1.6715353  1.6909358  1.7110787 #> fitted.Predictor.073  1.6043530 0.009679227  1.5843189  1.6043905  1.6238362 #> fitted.Predictor.074  1.3653261 0.009770372  1.3465871  1.3650057  1.3864274 #> fitted.Predictor.075  1.6739800 0.009734582  1.6528151  1.6742497  1.6926907 #> fitted.Predictor.076  1.1935942 0.009781220  1.1747887  1.1932857  1.2146681 #> fitted.Predictor.077  1.6540298 0.009739042  1.6328354  1.6543039  1.6727321 #> fitted.Predictor.078  1.2505487 0.009725335  1.2314815  1.2503319  1.2711314 #> fitted.Predictor.079  1.2907648 0.009673520  1.2710905  1.2907200  1.3105577 #> fitted.Predictor.080  1.3538157 0.009672590  1.3335857  1.3539017  1.3731000 #> fitted.Predictor.081  1.2889295 0.009679083  1.2694022  1.2888465  1.3088823 #> fitted.Predictor.082  1.2956181 0.009677461  1.2752713  1.2957290  1.3148172 #> fitted.Predictor.083  1.1088772 0.009758460  1.0901017  1.1085716  1.1298922 #> fitted.Predictor.084  1.3769228 0.009701534  1.3560873  1.3771338  1.3957904 #> fitted.Predictor.085  1.2699342 0.009688213  1.2498162  1.2699866  1.2893755 #> fitted.Predictor.086  0.8798435 0.009702347  0.8600728  0.8798082  0.8996540 #> fitted.Predictor.087  0.5583376 0.009723470  0.5392795  0.5581195  0.5789223 #> fitted.Predictor.088  0.6076075 0.009685333  0.5870535  0.6077625  0.6266553 #> fitted.Predictor.089  0.3944415 0.009771038  0.3756780  0.3941270  0.4155194 #> fitted.Predictor.090  0.8377144 0.009739115  0.8165962  0.8379715  0.8564794 #> fitted.Predictor.091  0.2054801 0.009781030  0.1866568  0.2051762  0.2265344 #> fitted.Predictor.092  0.6367452 0.009739732  0.6155441  0.6370205  0.6554444 #> fitted.Predictor.093  0.1918919 0.009783123  0.1731474  0.1915670  0.2130384 #> fitted.Predictor.094  0.5425566 0.009687223  0.5225879  0.5425751  0.5621285 #> fitted.Predictor.095  0.6667731 0.009690429  0.6471617  0.6667052  0.6866888 #> fitted.Predictor.096  0.9441939 0.009680979  0.9239776  0.9442729  0.9635207 #> fitted.Predictor.097  0.9900467 0.009702826  0.9706351  0.9899248  1.0102009 #> fitted.Predictor.098  1.4402388 0.009733840  1.4190473  1.4405147  1.4589254 #> fitted.Predictor.099  1.1550472 0.009760239  1.1362794  1.1547388  1.1760774 #> fitted.Predictor.100  1.3386136 0.009707394  1.3182467  1.3387151  1.3579033 #>                            mode #> fitted.Predictor.001 -0.9083733 #> fitted.Predictor.002 -0.5956015 #> fitted.Predictor.003 -0.7249082 #> fitted.Predictor.004 -0.6287697 #> fitted.Predictor.005 -1.0002032 #> fitted.Predictor.006 -0.5410271 #> fitted.Predictor.007 -1.0483923 #> fitted.Predictor.008 -1.1165509 #> fitted.Predictor.009 -0.7041659 #> fitted.Predictor.010 -0.6407935 #> fitted.Predictor.011 -0.6867965 #> fitted.Predictor.012 -0.7933853 #> fitted.Predictor.013 -0.4945600 #> fitted.Predictor.014 -0.9505975 #> fitted.Predictor.015 -0.2561249 #> fitted.Predictor.016 -0.3807541 #> fitted.Predictor.017 -1.1010053 #> fitted.Predictor.018 -0.7868109 #> fitted.Predictor.019 -0.8908014 #> fitted.Predictor.020 -0.4651841 #> fitted.Predictor.021 -3.9534015 #> fitted.Predictor.022 -3.5035210 #> fitted.Predictor.023 -4.0013813 #> fitted.Predictor.024 -3.6411316 #> fitted.Predictor.025 -3.6092971 #> fitted.Predictor.026 -3.3887530 #> fitted.Predictor.027 -3.5035434 #> fitted.Predictor.028 -3.6586398 #> fitted.Predictor.029 -3.6964493 #> fitted.Predictor.030 -3.8020859 #> fitted.Predictor.031 -3.5613098 #> fitted.Predictor.032 -3.5077129 #> fitted.Predictor.033 -3.7138280 #> fitted.Predictor.034 -3.7091031 #> fitted.Predictor.035 -3.8766528 #> fitted.Predictor.036 -4.0508248 #> fitted.Predictor.037 -3.6454299 #> fitted.Predictor.038 -3.3371954 #> fitted.Predictor.039 -3.9236282 #> fitted.Predictor.040 -3.5923746 #> fitted.Predictor.041  1.6214942 #> fitted.Predictor.042  1.4336270 #> fitted.Predictor.043  1.8028726 #> fitted.Predictor.044  1.3908034 #> fitted.Predictor.045  1.1971372 #> fitted.Predictor.046  1.3267047 #> fitted.Predictor.047  1.4087366 #> fitted.Predictor.048  1.6095096 #> fitted.Predictor.049  1.4310278 #> fitted.Predictor.050  1.7476940 #> fitted.Predictor.051  1.6842002 #> fitted.Predictor.052  1.7020115 #> fitted.Predictor.053  1.4657860 #> fitted.Predictor.054  1.7443506 #> fitted.Predictor.055  2.1612475 #> fitted.Predictor.056  2.0135386 #> fitted.Predictor.057  1.9575415 #> fitted.Predictor.058  2.1954929 #> fitted.Predictor.059  2.2023466 #> fitted.Predictor.060  1.9940426 #> fitted.Predictor.061  2.0481574 #> fitted.Predictor.062  2.3865717 #> fitted.Predictor.063  2.4212072 #> fitted.Predictor.064  2.1945875 #> fitted.Predictor.065  1.7723934 #> fitted.Predictor.066  2.3313806 #> fitted.Predictor.067  2.3826372 #> fitted.Predictor.068  1.8348599 #> fitted.Predictor.069  2.1161560 #> fitted.Predictor.070  1.9571418 #> fitted.Predictor.071  2.0495330 #> fitted.Predictor.072  1.6908820 #> fitted.Predictor.073  1.6044364 #> fitted.Predictor.074  1.3647926 #> fitted.Predictor.075  1.6744617 #> fitted.Predictor.076  1.1930817 #> fitted.Predictor.077  1.6545187 #> fitted.Predictor.078  1.2501926 #> fitted.Predictor.079  1.2907053 #> fitted.Predictor.080  1.3539823 #> fitted.Predictor.081  1.2888031 #> fitted.Predictor.082  1.2958283 #> fitted.Predictor.083  1.1083685 #> fitted.Predictor.084  1.3773043 #> fitted.Predictor.085  1.2700418 #> fitted.Predictor.086  0.8798004 #> fitted.Predictor.087  0.5579788 #> fitted.Predictor.088  0.6078938 #> fitted.Predictor.089  0.3939181 #> fitted.Predictor.090  0.8381739 #> fitted.Predictor.091  0.2049757 #> fitted.Predictor.092  0.6372362 #> fitted.Predictor.093  0.1913515 #> fitted.Predictor.094  0.5426069 #> fitted.Predictor.095  0.6666732 #> fitted.Predictor.096  0.9443484 #> fitted.Predictor.097  0.9898535 #> fitted.Predictor.098  1.4407311 #> fitted.Predictor.099  1.1545337 #> fitted.Predictor.100  1.3388069 #>  #> $marginal #> NULL #>   samples <- simulate(LnGM)"},{"path":"/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints outputs of the ngvb.list object. â print,ngvb.list-method","title":"Prints outputs of the ngvb.list object. â print,ngvb.list-method","text":"Prints outputs ngvb.list object.","code":""},{"path":"/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints outputs of the ngvb.list object. â print,ngvb.list-method","text":"","code":"# S4 method for ngvb.list print(x)"},{"path":"/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints outputs of the ngvb.list object. â print,ngvb.list-method","text":"x ngvb.list object (output ngvb function)","code":""},{"path":"/reference/print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prints outputs of the ngvb.list object. â print,ngvb.list-method","text":"","code":"#Here we fit an RW1 latent process to the jumpts time series  plot(jumpts)    #Fit LGM with INLA  LGM     <- inla(y ~ -1 + f(x,  model = \"rw1\"),                  data = jumpts)   #Fit LnGM with ngvb  LnGM <- ngvb(fit = LGM, selection = list(x=1:100)) #> [1] \"Warning: You need to add log(|D|) to mll: check inla.doc(generic0)\" #>  #> 0Oo----------- Iteration 1 -----------oO0 #> Initial value of eta: 0.5 #>  #> 0Oo----------- Iteration 2 -----------oO0 #> Expectation of eta: 4.844 #>  #> 0Oo----------- Iteration 3 -----------oO0 #> Expectation of eta: 4.009 #>  #> 0Oo----------- Iteration 4 -----------oO0 #> Expectation of eta: 3.41 #>  #> 0Oo----------- Iteration 5 -----------oO0 #> Expectation of eta: 3.089 #>  #> 0Oo----------- Iteration 6 -----------oO0 #> Expectation of eta: 2.784 #>  #> 0Oo----------- Iteration 7 -----------oO0 #> Expectation of eta: 2.626 #>  #> 0Oo----------- Iteration 8 -----------oO0 #> Expectation of eta: 2.492 #>  #> 0Oo----------- Iteration 9 -----------oO0 #> Expectation of eta: 2.44 #>  #> 0Oo----------- Iteration 10 -----------oO0 #> Expectation of eta: 2.414 #>  #>  0Oo----------- Maximum number of iterations reached -----------oO0   #Available methods  summary(LnGM) #>                                     mean        sd 0.025quant 0.5quant #> Non Gaussianity parameter for x 2.413582 0.7578743   1.244121 2.310671 #>                                 0.975quant #> Non Gaussianity parameter for x    4.07901 #>  #> Call: #>    c(\"inla.core(formula = formula, family = family, contrasts = contrasts,  #>    \", \" data = data, quantiles = quantiles, E = E, offset = offset, \", \"  #>    scale = scale, weights = weights, Ntrials = Ntrials, strata = strata,  #>    \", \" lp.scale = lp.scale, link.covariates = link.covariates, verbose =  #>    verbose, \", \" lincomb = lincomb, selection = selection, control.compute  #>    = control.compute, \", \" control.predictor = control.predictor,  #>    control.family = control.family, \", \" control.inla = control.inla,  #>    control.fixed = control.fixed, \", \" control.mode = control.mode,  #>    control.expert = control.expert, \", \" control.hazard = control.hazard,  #>    control.lincomb = control.lincomb, \", \" control.update =  #>    control.update, control.lp.scale = control.lp.scale, \", \"  #>    control.pardiso = control.pardiso, only.hyperparam = only.hyperparam,  #>    \", \" inla.call = inla.call, inla.arg = inla.arg, num.threads =  #>    num.threads, \", \" blas.num.threads = blas.num.threads, keep = keep,  #>    working.directory = working.directory, \", \" silent = silent, inla.mode  #>    = inla.mode, safe = FALSE, debug = debug, \", \" .parent.frame =  #>    .parent.frame)\")  #> Random effects: #>   Name\t  Model #>     x Generic0 model #>  #> Model hyperparameters: #>                                             mean       sd 0.025quant 0.5quant #> Precision for the Gaussian observations 18797.85 1.84e+04    1353.97 13274.19 #> Precision for x                             4.50 6.34e-01       3.36     4.46 #>                                         0.975quant    mode #> Precision for the Gaussian observations   67943.82 3769.88 #> Precision for x                               5.85    4.40 #>  #> Marginal log-Likelihood:  -76.59  #>  is computed  #> Posterior summaries for the linear predictor and the fitted values are computed #> (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)') #>   print(LnGM) #> Call: #>    c(\"inla.core(formula = formula, family = family, contrasts = contrasts,  #>    \", \" data = data, quantiles = quantiles, E = E, offset = offset, \", \"  #>    scale = scale, weights = weights, Ntrials = Ntrials, strata = strata,  #>    \", \" lp.scale = lp.scale, link.covariates = link.covariates, verbose =  #>    verbose, \", \" lincomb = lincomb, selection = selection, control.compute  #>    = control.compute, \", \" control.predictor = control.predictor,  #>    control.family = control.family, \", \" control.inla = control.inla,  #>    control.fixed = control.fixed, \", \" control.mode = control.mode,  #>    control.expert = control.expert, \", \" control.hazard = control.hazard,  #>    control.lincomb = control.lincomb, \", \" control.update =  #>    control.update, control.lp.scale = control.lp.scale, \", \"  #>    control.pardiso = control.pardiso, only.hyperparam = only.hyperparam,  #>    \", \" inla.call = inla.call, inla.arg = inla.arg, num.threads =  #>    num.threads, \", \" blas.num.threads = blas.num.threads, keep = keep,  #>    working.directory = working.directory, \", \" silent = silent, inla.mode  #>    = inla.mode, safe = FALSE, debug = debug, \", \" .parent.frame =  #>    .parent.frame)\")  #> Time used: #>   Pre = 0.492, Running = 0.141, Post = 0.144, Total = 0.776 #>  #>   #> ngvb Configurations:  #> $h #> $h[[1]] #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> [39] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> [77] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #>  #>  #> $alpha.eta #> [1] 1 #>  #> $method #> [1] \"SCVI\" #>  #> $N #> [1] 100 #>  #> $ncomp #> [1] 1 #>  #> $selection #> $selection$x #>   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18 #>  [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36 #>  [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54 #>  [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72 #>  [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90 #>  [91]  91  92  93  94  95  96  97  98  99 100 #>  #>  #> $n.sampling #> [1] 1000 #>  #> $inla.fit.V #> function(V, theta = NULL){ #>  #>     for(i in 1:ncomp){ #>  #>       #USE generic0 or cgeneric? #>       if(use.generic0[i]){ #If so you only need to define matrices Q and rankdefs #>         D <- D.config[[i]]$D #>  #>         assign(paste('VINIG.Q.',i,sep=\"\"), as(t(D)%*%Diagonal(length(V[[i]]),1/V[[i]])%*%D, \"dgTMatrix\"), envir = .GlobalEnv) #>  #>       }else if( model[i] == \"iid\") { #>         assign(\"V\", V, envir = .GlobalEnv) #>  #>       }else if (model[i] == \"ar1\"){ #If so you only need to define matrices Q and rankdefs #>  #>  #>         pcprior <- D.config[[i]]$pcprior #>  #>         folder  <- paste0(system.file(package = 'ngvb'),'/cfiles/') #>  #>         cmodel  <- inla.cgeneric.define(model = \"inla_cgeneric_ar1_model\", #>                                         shlib = paste0(folder,\"cgeneric-ngvb.so\"), #>                                         n     = N[[i]], #>                                         V     = V[[i]], #>                                         U1    = pcprior$U1, #>                                         alpha1= pcprior$alpha1, #>                                         U2    = pcprior$U2, #>                                         alpha2= pcprior$alpha2) #>  #>         assign(paste('rgeneric',i,sep=\"\"), cmodel, envir = .GlobalEnv) #>  #>       } #>  #>       #needed for sampling from x for a fixed value of theta #>       if(!is.null(theta)){ #>         arglist$control.mode = list(theta = theta, fixed = TRUE) #>       } #>  #>       fit       <- do.call(inla, arglist) #>       return(fit) #>     } #>  #>     return(inla.fit.V) #>   } #> <bytecode: 0x00000265f3513b80> #> <environment: 0x00000265eeff59c0> #>   plot(LnGM)    fitted(LnGM) #> $summary #>                            mean          sd 0.025quant   0.5quant 0.975quant #> fitted.Predictor.001 -0.9080978 0.009744581 -0.9273819 -0.9082705 -0.8876542 #> fitted.Predictor.002 -0.5960025 0.009712301 -0.6169191 -0.5957785 -0.5771611 #> fitted.Predictor.003 -0.7245697 0.009714944 -0.7436678 -0.7247747 -0.7040547 #> fitted.Predictor.004 -0.6291445 0.009708280 -0.6499719 -0.6289386 -0.6102429 #> fitted.Predictor.005 -0.9996630 0.009788494 -1.0184245 -0.9999867 -0.9785090 #> fitted.Predictor.006 -0.5415033 0.009745104 -0.5626835 -0.5412356 -0.5227642 #> fitted.Predictor.007 -1.0482289 0.009706404 -1.0677152 -1.0483346 -1.0281293 #> fitted.Predictor.008 -1.1161556 0.009737953 -1.1351594 -1.1163945 -1.0954546 #> fitted.Predictor.009 -0.7043024 0.009691192 -0.7244923 -0.7042349 -0.6849107 #> fitted.Predictor.010 -0.6409556 0.009671344 -0.6611662 -0.6408741 -0.6216544 #> fitted.Predictor.011 -0.6868429 0.009672903 -0.7067848 -0.6868245 -0.6672954 #> fitted.Predictor.012 -0.7929239 0.009746953 -0.8118061 -0.7931977 -0.7720621 #> fitted.Predictor.013 -0.4950551 0.009739697 -0.5162638 -0.4947785 -0.4763585 #> fitted.Predictor.014 -0.9501035 0.009785902 -0.9689540 -0.9504033 -0.9290542 #> fitted.Predictor.015 -0.2565153 0.009717775 -0.2773933 -0.2563028 -0.2376219 #> fitted.Predictor.016 -0.3807743 0.009700428 -0.4007053 -0.3807716 -0.3611148 #> fitted.Predictor.017 -1.1004996 0.009782769 -1.1193268 -1.1008038 -1.0794380 #> fitted.Predictor.018 -0.7871790 0.009707468 -0.8080057 -0.7869729 -0.7682798 #> fitted.Predictor.019 -0.8903847 0.009747565 -0.9093355 -0.8906415 -0.8695917 #> fitted.Predictor.020 -0.4655382 0.009736245 -0.4863946 -0.4653392 -0.4465616 #> fitted.Predictor.021 -3.9529790 0.009772417 -3.9719942 -3.9532311 -3.9321547 #> fitted.Predictor.022 -3.5040176 0.009745924 -3.5252259 -3.5037440 -3.4852988 #> fitted.Predictor.023 -4.0008574 0.009786860 -4.0196397 -4.0011750 -3.9797320 #> fitted.Predictor.024 -3.6413009 0.009690445 -3.6615860 -3.6412107 -3.6219966 #> fitted.Predictor.025 -3.6090954 0.009699294 -3.6284669 -3.6092260 -3.5889115 #> fitted.Predictor.026 -3.3891241 0.009703057 -3.4099546 -3.3889154 -3.3702430 #> fitted.Predictor.027 -3.5035642 0.009681997 -3.5234535 -3.5035627 -3.4839347 #> fitted.Predictor.028 -3.6584695 0.009691124 -3.6779215 -3.6585765 -3.6383947 #> fitted.Predictor.029 -3.6965107 0.009676024 -3.7164864 -3.6964857 -3.6769826 #> fitted.Predictor.030 -3.8016491 0.009740514 -3.8205647 -3.8019113 -3.7808472 #> fitted.Predictor.031 -3.5614667 0.009683467 -3.5816846 -3.5613891 -3.5421280 #> fitted.Predictor.032 -3.5080025 0.009690544 -3.5285935 -3.5078424 -3.4889630 #> fitted.Predictor.033 -3.7135695 0.009704350 -3.7328243 -3.7137308 -3.6932517 #> fitted.Predictor.034 -3.7093009 0.009679546 -3.7296190 -3.7091981 -3.6900651 #> fitted.Predictor.035 -3.8766275 0.009687716 -3.8964128 -3.8766530 -3.8568811 #> fitted.Predictor.036 -4.0503005 0.009770617 -4.0690816 -4.0506108 -4.0292384 #> fitted.Predictor.037 -3.6454158 0.009705538 -3.6652610 -3.6454356 -3.6256585 #> fitted.Predictor.038 -3.3376931 0.009742472 -3.3588983 -3.3374187 -3.3189835 #> fitted.Predictor.039 -3.9230840 0.009788648 -3.9418514 -3.9234063 -3.9019355 #> fitted.Predictor.040 -3.5924992 0.009717346 -3.6127086 -3.5924391 -3.5730299 #> fitted.Predictor.041  1.6211802 0.009720505  1.6004749  1.6213525  1.6402286 #> fitted.Predictor.042  1.4341148 0.009766092  1.4152931  1.4338168  1.4551157 #> fitted.Predictor.043  1.8023992 0.009740858  1.7812180  1.8026691  1.8211227 #> fitted.Predictor.044  1.3908599 0.009702930  1.3711148  1.3908177  1.4107006 #> fitted.Predictor.045  1.1975594 0.009738893  1.1786325  1.1973009  1.2183432 #> fitted.Predictor.046  1.3266839 0.009678798  1.3068001  1.3266860  1.3463062 #> fitted.Predictor.047  1.4088673 0.009690908  1.3893221  1.4087827  1.4288519 #> fitted.Predictor.048  1.6090695 0.009711406  1.5880846  1.6093094  1.6278509 #> fitted.Predictor.049  1.4315433 0.009764490  1.4127487  1.4312391  1.4525664 #> fitted.Predictor.050  1.7473632 0.009700472  1.7266621  1.7475440  1.7663439 #> fitted.Predictor.051  1.6843430 0.009684686  1.6648433  1.6842502  1.7043476 #> fitted.Predictor.052  1.7017866 0.009688511  1.6813612  1.7019101  1.7209610 #> fitted.Predictor.053  1.4662910 0.009769694  1.4475007  1.4659835  1.4873396 #> fitted.Predictor.054  1.7443932 0.009706295  1.7245977  1.7443613  1.7641994 #> fitted.Predictor.055  2.1607909 0.009721511  2.1397439  2.1610397  2.1795570 #> fitted.Predictor.056  2.0136900 0.009689632  1.9941862  2.0135961  2.0337093 #> fitted.Predictor.057  1.9578726 0.009723750  1.9387759  1.9576635  1.9784236 #> fitted.Predictor.058  2.1953020 0.009686804  2.1749543  2.1954081  2.2145385 #> fitted.Predictor.059  2.2021316 0.009685303  2.1817356  2.2022495  2.2213205 #> fitted.Predictor.060  1.9943714 0.009720806  1.9752700  1.9941648  2.0149062 #> fitted.Predictor.061  2.0483814 0.009708763  2.0290092  2.0482469  2.0686008 #> fitted.Predictor.062  2.3863746 0.009690250  2.3660466  2.3864744  2.4056410 #> fitted.Predictor.063  2.4209322 0.009690211  2.4003858  2.4210821  2.4400090 #> fitted.Predictor.064  2.1945894 0.009702299  2.1747275  2.1945751  2.2143192 #> fitted.Predictor.065  1.7729324 0.009791233  1.7541554  1.7726114  1.7940812 #> fitted.Predictor.066  2.3312340 0.009696209  2.3110101  2.3313069  2.3506139 #> fitted.Predictor.067  2.3823494 0.009704502  2.3617309  2.3825092  2.4014153 #> fitted.Predictor.068  1.8353779 0.009781403  1.8165791  1.8350670  1.8564640 #> fitted.Predictor.069  2.1157226 0.009715634  2.0947342  2.1159613  2.1345158 #> fitted.Predictor.070  1.9575011 0.009720363  1.9384449  1.9572832  1.9780796 #> fitted.Predictor.071  2.0491701 0.009707179  2.0283613  2.0493722  2.0680837 #> fitted.Predictor.072  1.6910237 0.009700943  1.6714979  1.6909298  1.7110648 #> fitted.Predictor.073  1.6043601 0.009684757  1.5843250  1.6043949  1.6238666 #> fitted.Predictor.074  1.3652947 0.009771427  1.3465024  1.3649868  1.3863480 #> fitted.Predictor.075  1.6739861 0.009739399  1.6528197  1.6742535  1.6927163 #> fitted.Predictor.076  1.1936179 0.009789628  1.1748332  1.1932996  1.2147518 #> fitted.Predictor.077  1.6540455 0.009742728  1.6328695  1.6543134  1.6727796 #> fitted.Predictor.078  1.2505317 0.009727322  1.2314314  1.2503217  1.2710928 #> fitted.Predictor.079  1.2907629 0.009676155  1.2710781  1.2907189  1.3105598 #> fitted.Predictor.080  1.3538035 0.009675396  1.3335450  1.3538945  1.3730768 #> fitted.Predictor.081  1.2889384 0.009682884  1.2694166  1.2888519  1.3089150 #> fitted.Predictor.082  1.2956331 0.009683073  1.2752986  1.2957381  1.3148672 #> fitted.Predictor.083  1.1088467 0.009760285  1.0900181  1.1085532  1.1298173 #> fitted.Predictor.084  1.3769301 0.009705617  1.3560970  1.3771382  1.3958180 #> fitted.Predictor.085  1.2699843 0.009693498  1.2499406  1.2700166  1.2895158 #> fitted.Predictor.086  0.8798198 0.009708658  0.8599940  0.8797940  0.8996067 #> fitted.Predictor.087  0.5583243 0.009726165  0.5392369  0.5581115  0.5788940 #> fitted.Predictor.088  0.6075963 0.009689269  0.5870128  0.6077558  0.6266368 #> fitted.Predictor.089  0.3944487 0.009776813  0.3756841  0.3941312  0.4155528 #> fitted.Predictor.090  0.8377045 0.009744979  0.8165537  0.8379657  0.8564671 #> fitted.Predictor.091  0.2055011 0.009789023  0.1866950  0.2051886  0.2266098 #> fitted.Predictor.092  0.6367547 0.009743854  0.6155600  0.6370263  0.6554773 #> fitted.Predictor.093  0.1918921 0.009787960  0.1731372  0.1915670  0.2130512 #> fitted.Predictor.094  0.5425255 0.009692191  0.5224912  0.5425565  0.5620602 #> fitted.Predictor.095  0.6667751 0.009696891  0.6471524  0.6667063  0.6867086 #> fitted.Predictor.096  0.9442030 0.009685826  0.9239909  0.9442783  0.9635551 #> fitted.Predictor.097  0.9900690 0.009708615  0.9706814  0.9899381  1.0102728 #> fitted.Predictor.098  1.4402251 0.009740254  1.4189926  1.4405067  1.4589045 #> fitted.Predictor.099  1.1550220 0.009762597  1.1362082  1.1547236  1.1760173 #> fitted.Predictor.100  1.3386289 0.009713061  1.3182751  1.3387244  1.3579547 #>                            mode #> fitted.Predictor.001 -0.9083775 #> fitted.Predictor.002 -0.5955984 #> fitted.Predictor.003 -0.7249071 #> fitted.Predictor.004 -0.6287713 #> fitted.Predictor.005 -1.0002015 #> fitted.Predictor.006 -0.5410257 #> fitted.Predictor.007 -1.0483931 #> fitted.Predictor.008 -1.1165491 #> fitted.Predictor.009 -0.7041682 #> fitted.Predictor.010 -0.6407975 #> fitted.Predictor.011 -0.6867930 #> fitted.Predictor.012 -0.7933782 #> fitted.Predictor.013 -0.4945615 #> fitted.Predictor.014 -0.9506008 #> fitted.Predictor.015 -0.2561318 #> fitted.Predictor.016 -0.3807524 #> fitted.Predictor.017 -1.1010046 #> fitted.Predictor.018 -0.7868051 #> fitted.Predictor.019 -0.8908100 #> fitted.Predictor.020 -0.4651783 #> fitted.Predictor.021 -3.9533945 #> fitted.Predictor.022 -3.5035298 #> fitted.Predictor.023 -4.0013853 #> fitted.Predictor.024 -3.6411268 #> fitted.Predictor.025 -3.6093040 #> fitted.Predictor.026 -3.3887467 #> fitted.Predictor.027 -3.5035442 #> fitted.Predictor.028 -3.6586369 #> fitted.Predictor.029 -3.6964488 #> fitted.Predictor.030 -3.8020834 #> fitted.Predictor.031 -3.5613150 #> fitted.Predictor.032 -3.5077086 #> fitted.Predictor.033 -3.7138311 #> fitted.Predictor.034 -3.7091051 #> fitted.Predictor.035 -3.8766536 #> fitted.Predictor.036 -4.0508161 #> fitted.Predictor.037 -3.6454322 #> fitted.Predictor.038 -3.3372040 #> fitted.Predictor.039 -3.9236197 #> fitted.Predictor.040 -3.5923775 #> fitted.Predictor.041  1.6214950 #> fitted.Predictor.042  1.4336192 #> fitted.Predictor.043  1.8028808 #> fitted.Predictor.044  1.3908050 #> fitted.Predictor.045  1.1971317 #> fitted.Predictor.046  1.3267061 #> fitted.Predictor.047  1.4087381 #> fitted.Predictor.048  1.6095011 #> fitted.Predictor.049  1.4310369 #> fitted.Predictor.050  1.7476932 #> fitted.Predictor.051  1.6841993 #> fitted.Predictor.052  1.7020181 #> fitted.Predictor.053  1.4657798 #> fitted.Predictor.054  1.7443561 #> fitted.Predictor.055  2.1612369 #> fitted.Predictor.056  2.0135453 #> fitted.Predictor.057  1.9575297 #> fitted.Predictor.058  2.1955027 #> fitted.Predictor.059  2.2023528 #> fitted.Predictor.060  1.9940328 #> fitted.Predictor.061  2.0481674 #> fitted.Predictor.062  2.3865641 #> fitted.Predictor.063  2.4212081 #> fitted.Predictor.064  2.1945826 #> fitted.Predictor.065  1.7723993 #> fitted.Predictor.066  2.3313773 #> fitted.Predictor.067  2.3826425 #> fitted.Predictor.068  1.8348611 #> fitted.Predictor.069  2.1161522 #> fitted.Predictor.070  1.9571416 #> fitted.Predictor.071  2.0495365 #> fitted.Predictor.072  1.6908789 #> fitted.Predictor.073  1.6044387 #> fitted.Predictor.074  1.3647826 #> fitted.Predictor.075  1.6744638 #> fitted.Predictor.076  1.1930888 #> fitted.Predictor.077  1.6545237 #> fitted.Predictor.078  1.2501873 #> fitted.Predictor.079  1.2907047 #> fitted.Predictor.080  1.3539786 #> fitted.Predictor.081  1.2888058 #> fitted.Predictor.082  1.2958330 #> fitted.Predictor.083  1.1083588 #> fitted.Predictor.084  1.3773066 #> fitted.Predictor.085  1.2700571 #> fitted.Predictor.086  0.8797932 #> fitted.Predictor.087  0.5579747 #> fitted.Predictor.088  0.6078904 #> fitted.Predictor.089  0.3939201 #> fitted.Predictor.090  0.8381711 #> fitted.Predictor.091  0.2049819 #> fitted.Predictor.092  0.6372394 #> fitted.Predictor.093  0.1913514 #> fitted.Predictor.094  0.5425975 #> fitted.Predictor.095  0.6666738 #> fitted.Predictor.096  0.9443512 #> fitted.Predictor.097  0.9898602 #> fitted.Predictor.098  1.4407271 #> fitted.Predictor.099  1.1545257 #> fitted.Predictor.100  1.3388117 #>  #> $marginal #> NULL #>   samples <- simulate(LnGM)"},{"path":"/reference/simulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain samples from the fitted LnGM model parameters. â simulate,ngvb.list-method","title":"Obtain samples from the fitted LnGM model parameters. â simulate,ngvb.list-method","text":"Obtain samples fitted LnGM model parameters.","code":""},{"path":"/reference/simulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain samples from the fitted LnGM model parameters. â simulate,ngvb.list-method","text":"","code":"# S4 method for ngvb.list simulate(   object,   n.sampling = object@configs$n.sampling,   components = c(\"LGM\", \"V\", \"ng\"),   long.tailed = FALSE,   augmentation = 10 )"},{"path":"/reference/simulate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain samples from the fitted LnGM model parameters. â simulate,ngvb.list-method","text":"object ngvb.list object (output ngvb function). n.sampling Integer. Number samples. components Vector containing c(\"LGM\",\"V\",\"ng\",\"hyperpar\"). components contains \"LGM\" generates samples \\((\\mathbf{x},\\boldsymbol{\\theta})\\) using inla.posterior.sample. contains \"hyperpar\" generate samples \\(\\boldsymbol{\\theta}\\) using inla.hypearpar.sample. contains \"V\" \"ng\" generate samples mixing variables \\(\\mathbf{V}\\) \\(\\eta\\) model component, respectively. long.tailed Logical. TRUE generate long-tailed samples latent field \\(\\mathbf{x}\\). first generates samples \\((\\mathbf{V},\\boldsymbol{\\theta})\\) generates samples  \\(\\mathbf{x} | \\mathbf{V} , \\boldsymbol{\\theta}, \\mathbf{y}\\) (LGM) fitting INLA model time generating n = augmentation samples.  Slow. Reduce n.sampling speed increase augmentation obtain samples. augmentation Integer. long.tailed = TRUE, sample \\((\\mathbf{V},\\boldsymbol{\\theta})\\) generate n = augmentation samples \\(\\mathbf{x} | \\mathbf{V} , \\boldsymbol{\\theta} , \\mathbf{y}\\).","code":""},{"path":"/reference/simulate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain samples from the fitted LnGM model parameters. â simulate,ngvb.list-method","text":"","code":"#Here we fit an RW1 latent process to the jumpts time series  plot(jumpts)    #Fit LGM with INLA  LGM     <- inla(y ~ -1 + f(x,  model = \"rw1\"),                  data = jumpts)   #Fit LnGM with ngvb  LnGM <- ngvb(fit = LGM, selection = list(x=1:100)) #> [1] \"Warning: You need to add log(|D|) to mll: check inla.doc(generic0)\" #>  #> 0Oo----------- Iteration 1 -----------oO0 #> Initial value of eta: 0.5 #>  #> 0Oo----------- Iteration 2 -----------oO0 #> Expectation of eta: 4.794 #>  #> 0Oo----------- Iteration 3 -----------oO0 #> Expectation of eta: 3.931 #>  #> 0Oo----------- Iteration 4 -----------oO0 #> Expectation of eta: 3.366 #>  #> 0Oo----------- Iteration 5 -----------oO0 #> Expectation of eta: 3.017 #>  #> 0Oo----------- Iteration 6 -----------oO0 #> Expectation of eta: 2.801 #>  #> 0Oo----------- Iteration 7 -----------oO0 #> Expectation of eta: 2.573 #>  #> 0Oo----------- Iteration 8 -----------oO0 #> Expectation of eta: 2.533 #>  #> 0Oo----------- Iteration 9 -----------oO0 #> Expectation of eta: 2.382 #>  #> 0Oo----------- Iteration 10 -----------oO0 #> Expectation of eta: 2.318 #>  #>  0Oo----------- Maximum number of iterations reached -----------oO0   #Available methods  summary(LnGM) #>                                     mean        sd 0.025quant 0.5quant #> Non Gaussianity parameter for x 2.318299 0.7453985   1.135714 2.216875 #>                                 0.975quant #> Non Gaussianity parameter for x   4.107794 #>  #> Call: #>    c(\"inla.core(formula = formula, family = family, contrasts = contrasts,  #>    \", \" data = data, quantiles = quantiles, E = E, offset = offset, \", \"  #>    scale = scale, weights = weights, Ntrials = Ntrials, strata = strata,  #>    \", \" lp.scale = lp.scale, link.covariates = link.covariates, verbose =  #>    verbose, \", \" lincomb = lincomb, selection = selection, control.compute  #>    = control.compute, \", \" control.predictor = control.predictor,  #>    control.family = control.family, \", \" control.inla = control.inla,  #>    control.fixed = control.fixed, \", \" control.mode = control.mode,  #>    control.expert = control.expert, \", \" control.hazard = control.hazard,  #>    control.lincomb = control.lincomb, \", \" control.update =  #>    control.update, control.lp.scale = control.lp.scale, \", \"  #>    control.pardiso = control.pardiso, only.hyperparam = only.hyperparam,  #>    \", \" inla.call = inla.call, inla.arg = inla.arg, num.threads =  #>    num.threads, \", \" blas.num.threads = blas.num.threads, keep = keep,  #>    working.directory = working.directory, \", \" silent = silent, inla.mode  #>    = inla.mode, safe = FALSE, debug = debug, \", \" .parent.frame =  #>    .parent.frame)\")  #> Random effects: #>   Name\t  Model #>     x Generic0 model #>  #> Model hyperparameters: #>                                             mean       sd 0.025quant 0.5quant #> Precision for the Gaussian observations 18783.88 1.84e+04    1349.94 13266.62 #> Precision for x                             4.55 6.42e-01       3.40     4.51 #>                                         0.975quant    mode #> Precision for the Gaussian observations   67862.50 3757.48 #> Precision for x                               5.92    4.46 #>  #> Marginal log-Likelihood:  -76.00  #>  is computed  #> Posterior summaries for the linear predictor and the fitted values are computed #> (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)') #>   print(LnGM) #> Call: #>    c(\"inla.core(formula = formula, family = family, contrasts = contrasts,  #>    \", \" data = data, quantiles = quantiles, E = E, offset = offset, \", \"  #>    scale = scale, weights = weights, Ntrials = Ntrials, strata = strata,  #>    \", \" lp.scale = lp.scale, link.covariates = link.covariates, verbose =  #>    verbose, \", \" lincomb = lincomb, selection = selection, control.compute  #>    = control.compute, \", \" control.predictor = control.predictor,  #>    control.family = control.family, \", \" control.inla = control.inla,  #>    control.fixed = control.fixed, \", \" control.mode = control.mode,  #>    control.expert = control.expert, \", \" control.hazard = control.hazard,  #>    control.lincomb = control.lincomb, \", \" control.update =  #>    control.update, control.lp.scale = control.lp.scale, \", \"  #>    control.pardiso = control.pardiso, only.hyperparam = only.hyperparam,  #>    \", \" inla.call = inla.call, inla.arg = inla.arg, num.threads =  #>    num.threads, \", \" blas.num.threads = blas.num.threads, keep = keep,  #>    working.directory = working.directory, \", \" silent = silent, inla.mode  #>    = inla.mode, safe = FALSE, debug = debug, \", \" .parent.frame =  #>    .parent.frame)\")  #> Time used: #>   Pre = 0.573, Running = 0.138, Post = 0.134, Total = 0.844 #>  #>   #> ngvb Configurations:  #> $h #> $h[[1]] #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> [39] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> [77] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #>  #>  #> $alpha.eta #> [1] 1 #>  #> $method #> [1] \"SCVI\" #>  #> $N #> [1] 100 #>  #> $ncomp #> [1] 1 #>  #> $selection #> $selection$x #>   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18 #>  [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36 #>  [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54 #>  [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72 #>  [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90 #>  [91]  91  92  93  94  95  96  97  98  99 100 #>  #>  #> $n.sampling #> [1] 1000 #>  #> $inla.fit.V #> function(V, theta = NULL){ #>  #>     for(i in 1:ncomp){ #>  #>       #USE generic0 or cgeneric? #>       if(use.generic0[i]){ #If so you only need to define matrices Q and rankdefs #>         D <- D.config[[i]]$D #>  #>         assign(paste('VINIG.Q.',i,sep=\"\"), as(t(D)%*%Diagonal(length(V[[i]]),1/V[[i]])%*%D, \"dgTMatrix\"), envir = .GlobalEnv) #>  #>       }else if( model[i] == \"iid\") { #>         assign(\"V\", V, envir = .GlobalEnv) #>  #>       }else if (model[i] == \"ar1\"){ #If so you only need to define matrices Q and rankdefs #>  #>  #>         pcprior <- D.config[[i]]$pcprior #>  #>         folder  <- paste0(system.file(package = 'ngvb'),'/cfiles/') #>  #>         cmodel  <- inla.cgeneric.define(model = \"inla_cgeneric_ar1_model\", #>                                         shlib = paste0(folder,\"cgeneric-ngvb.so\"), #>                                         n     = N[[i]], #>                                         V     = V[[i]], #>                                         U1    = pcprior$U1, #>                                         alpha1= pcprior$alpha1, #>                                         U2    = pcprior$U2, #>                                         alpha2= pcprior$alpha2) #>  #>         assign(paste('rgeneric',i,sep=\"\"), cmodel, envir = .GlobalEnv) #>  #>       } #>  #>       #needed for sampling from x for a fixed value of theta #>       if(!is.null(theta)){ #>         arglist$control.mode = list(theta = theta, fixed = TRUE) #>       } #>  #>       fit       <- do.call(inla, arglist) #>       return(fit) #>     } #>  #>     return(inla.fit.V) #>   } #> <bytecode: 0x00000265f3513b80> #> <environment: 0x00000265f5101cc8> #>   plot(LnGM)    fitted(LnGM) #> $summary #>                            mean          sd 0.025quant   0.5quant 0.975quant #> fitted.Predictor.001 -0.9080931 0.009746240 -0.9273719 -0.9082679 -0.8876367 #> fitted.Predictor.002 -0.5960048 0.009713929 -0.6169321 -0.5957796 -0.5771656 #> fitted.Predictor.003 -0.7245784 0.009716422 -0.7436919 -0.7247803 -0.7040719 #> fitted.Predictor.004 -0.6291124 0.009708916 -0.6498874 -0.6289191 -0.6101634 #> fitted.Predictor.005 -0.9996883 0.009786484 -1.0184843 -1.0000021 -0.9785778 #> fitted.Predictor.006 -0.5415075 0.009746936 -0.5627026 -0.5412377 -0.5227734 #> fitted.Predictor.007 -1.0482201 0.009709184 -1.0676972 -1.0483294 -1.0280998 #> fitted.Predictor.008 -1.1161708 0.009738570 -1.1351989 -1.1164038 -1.0954910 #> fitted.Predictor.009 -0.7042962 0.009693565 -0.7244816 -0.7042311 -0.6848908 #> fitted.Predictor.010 -0.6409387 0.009676655 -0.6611322 -0.6408639 -0.6216020 #> fitted.Predictor.011 -0.6868458 0.009678874 -0.7068059 -0.6868262 -0.6672916 #> fitted.Predictor.012 -0.7929673 0.009744647 -0.8119130 -0.7932240 -0.7721792 #> fitted.Predictor.013 -0.4950345 0.009739865 -0.5162100 -0.4947657 -0.4763093 #> fitted.Predictor.014 -0.9500948 0.009788529 -0.9689342 -0.9503985 -0.9290221 #> fitted.Predictor.015 -0.2564941 0.009719212 -0.2773403 -0.2562899 -0.2375680 #> fitted.Predictor.016 -0.3807854 0.009703402 -0.4007420 -0.3807783 -0.3611373 #> fitted.Predictor.017 -1.1005143 0.009782272 -1.1193622 -1.1008129 -1.0794754 #> fitted.Predictor.018 -0.7871759 0.009708145 -0.8080011 -0.7869708 -0.7682721 #> fitted.Predictor.019 -0.8903712 0.009749867 -0.9093034 -0.8906338 -0.8695487 #> fitted.Predictor.020 -0.4655525 0.009738567 -0.4864422 -0.4653474 -0.4465947 #> fitted.Predictor.021 -3.9529790 0.009774035 -3.9719958 -3.9532314 -3.9321488 #> fitted.Predictor.022 -3.5040026 0.009746049 -3.5251874 -3.5037348 -3.4852633 #> fitted.Predictor.023 -4.0008626 0.009787546 -4.0196523 -4.0011785 -3.9797411 #> fitted.Predictor.024 -3.6413099 0.009694310 -3.6616207 -3.6412159 -3.6220132 #> fitted.Predictor.025 -3.6090962 0.009703381 -3.6284759 -3.6092267 -3.5889035 #> fitted.Predictor.026 -3.3891276 0.009703893 -3.4099687 -3.3889173 -3.3702515 #> fitted.Predictor.027 -3.5035474 0.009682906 -3.5234110 -3.5035526 -3.4838898 #> fitted.Predictor.028 -3.6584777 0.009691654 -3.6779441 -3.6585815 -3.6384136 #> fitted.Predictor.029 -3.6965100 0.009676449 -3.7164864 -3.6964852 -3.6769799 #> fitted.Predictor.030 -3.8016649 0.009740365 -3.8206042 -3.8019211 -3.7808870 #> fitted.Predictor.031 -3.5614597 0.009688017 -3.5816761 -3.5613849 -3.5421021 #> fitted.Predictor.032 -3.5079848 0.009693760 -3.5285535 -3.5078316 -3.4889136 #> fitted.Predictor.033 -3.7135772 0.009707282 -3.7328491 -3.7137357 -3.6932638 #> fitted.Predictor.034 -3.7092994 0.009682743 -3.7296238 -3.7091970 -3.6900564 #> fitted.Predictor.035 -3.8766392 0.009687909 -3.8964453 -3.8766600 -3.8569102 #> fitted.Predictor.036 -4.0502988 0.009771812 -4.0690776 -4.0506100 -4.0292282 #> fitted.Predictor.037 -3.6454207 0.009707575 -3.6652790 -3.6454385 -3.6256667 #> fitted.Predictor.038 -3.3376802 0.009742975 -3.3588665 -3.3374107 -3.3189525 #> fitted.Predictor.039 -3.9230833 0.009790247 -3.9418503 -3.9234062 -3.9019268 #> fitted.Predictor.040 -3.5924943 0.009718630 -3.6126990 -3.5924361 -3.5730150 #> fitted.Predictor.041  1.6211771 0.009722155  1.6004605  1.6213509  1.6402227 #> fitted.Predictor.042  1.4341338 0.009770013  1.4153370  1.4338278  1.4551778 #> fitted.Predictor.043  1.8023766 0.009744168  1.7811440  1.8026560  1.8210705 #> fitted.Predictor.044  1.3908593 0.009703929  1.3711106  1.3908174  1.4107016 #> fitted.Predictor.045  1.1975611 0.009740432  1.1786355  1.1973016  1.2183536 #> fitted.Predictor.046  1.3266840 0.009680325  1.3067964  1.3266861  1.3463095 #> fitted.Predictor.047  1.4088590 0.009692466  1.3892969  1.4087775  1.4288346 #> fitted.Predictor.048  1.6090848 0.009712325  1.5881219  1.6093188  1.6278886 #> fitted.Predictor.049  1.4315432 0.009766112  1.4127476  1.4312387  1.4525729 #> fitted.Predictor.050  1.7473575 0.009701923  1.7266407  1.7475408  1.7663310 #> fitted.Predictor.051  1.6843461 0.009683630  1.6648528  1.6842521  1.7043539 #> fitted.Predictor.052  1.7017618 0.009687213  1.6812940  1.7018952  1.7208958 #> fitted.Predictor.053  1.4663076 0.009772928  1.4475393  1.4659931  1.4873936 #> fitted.Predictor.054  1.7443852 0.009708000  1.7245723  1.7443565  1.7641828 #> fitted.Predictor.055  2.1608299 0.009721686  2.1398488  2.1610633  2.1796521 #> fitted.Predictor.056  2.0136659 0.009691899  1.9941183  2.0135815  2.0336530 #> fitted.Predictor.057  1.9578788 0.009725649  1.9387896  1.9576670  1.9784459 #> fitted.Predictor.058  2.1952947 0.009688059  2.1749299  2.1954038  2.2145219 #> fitted.Predictor.059  2.2021484 0.009687157  2.1817759  2.2022597  2.2213656 #> fitted.Predictor.060  1.9943619 0.009720306  1.9752469  1.9941589  2.0148823 #> fitted.Predictor.061  2.0483633 0.009707213  2.0289645  2.0482360  2.0685521 #> fitted.Predictor.062  2.3863887 0.009690223  2.3660835  2.3864830  2.4056761 #> fitted.Predictor.063  2.4209234 0.009690360  2.4003593  2.4210770  2.4399865 #> fitted.Predictor.064  2.1946055 0.009704062  2.1747669  2.1945847  2.2143645 #> fitted.Predictor.065  1.7729209 0.009791062  1.7541280  1.7726043  1.7940532 #> fitted.Predictor.066  2.3312380 0.009696604  2.3110185  2.3313095  2.3506243 #> fitted.Predictor.067  2.3823379 0.009705491  2.3616945  2.3825026  2.4013871 #> fitted.Predictor.068  1.8353679 0.009781849  1.8165544  1.8350606  1.8564414 #> fitted.Predictor.069  2.1157360 0.009716160  2.0947671  2.1159696  2.1345482 #> fitted.Predictor.070  1.9574971 0.009722128  1.9384326  1.9572804  1.9780753 #> fitted.Predictor.071  2.0491853 0.009708860  2.0283968  2.0493815  2.0681229 #> fitted.Predictor.072  1.6910291 0.009704494  1.6715056  1.6909329  1.7110870 #> fitted.Predictor.073  1.6043499 0.009687733  1.5842897  1.6043889  1.6238459 #> fitted.Predictor.074  1.3652954 0.009772950  1.3465033  1.3649869  1.3863562 #> fitted.Predictor.075  1.6739825 0.009741124  1.6528025  1.6742517  1.6927084 #> fitted.Predictor.076  1.1936259 0.009792259  1.1748510  1.1933040  1.2147819 #> fitted.Predictor.077  1.6540444 0.009744286  1.6328597  1.6543131  1.6727777 #> fitted.Predictor.078  1.2505236 0.009728907  1.2314081  1.2503166  1.2710768 #> fitted.Predictor.079  1.2907641 0.009678924  1.2710754  1.2907196  1.3105690 #> fitted.Predictor.080  1.3538135 0.009678416  1.3335643  1.3539006  1.3731070 #> fitted.Predictor.081  1.2889311 0.009683955  1.2693949  1.2888474  1.3088992 #> fitted.Predictor.082  1.2956200 0.009682584  1.2752621  1.2957303  1.3148328 #> fitted.Predictor.083  1.1088612 0.009763054  1.0900522  1.1085616  1.1298647 #> fitted.Predictor.084  1.3769238 0.009706855  1.3560743  1.3771347  1.3958033 #> fitted.Predictor.085  1.2699861 0.009694156  1.2499428  1.2700177  1.2895215 #> fitted.Predictor.086  0.8798243 0.009710094  0.8600028  0.8797967  0.8996216 #> fitted.Predictor.087  0.5583179 0.009728126  0.5392182  0.5581074  0.5788840 #> fitted.Predictor.088  0.6076201 0.009691691  0.5870703  0.6077704  0.6266993 #> fitted.Predictor.089  0.3944195 0.009774802  0.3756143  0.3941133  0.4154738 #> fitted.Predictor.090  0.8376962 0.009747288  0.8165220  0.8379611  0.8564485 #> fitted.Predictor.091  0.2055182 0.009793087  0.1867337  0.2051983  0.2266673 #> fitted.Predictor.092  0.6367334 0.009747208  0.6154894  0.6370139  0.6554283 #> fitted.Predictor.093  0.1918879 0.009789019  0.1731266  0.1915642  0.2130456 #> fitted.Predictor.094  0.5425505 0.009694821  0.5225529  0.5425715  0.5621293 #> fitted.Predictor.095  0.6667868 0.009698531  0.6471806  0.6667132  0.6867432 #> fitted.Predictor.096  0.9441859 0.009688986  0.9239359  0.9442683  0.9635171 #> fitted.Predictor.097  0.9900745 0.009712462  0.9706893  0.9899412  1.0102966 #> fitted.Predictor.098  1.4402239 0.009741747  1.4189828  1.4405064  1.4589022 #> fitted.Predictor.099  1.1550281 0.009764647  1.1362219  1.1547269  1.1760409 #> fitted.Predictor.100  1.3386259 0.009714250  1.3182626  1.3387227  1.3579487 #>                            mode #> fitted.Predictor.001 -0.9083762 #> fitted.Predictor.002 -0.5955990 #> fitted.Predictor.003 -0.7249099 #> fitted.Predictor.004 -0.6287613 #> fitted.Predictor.005 -1.0002095 #> fitted.Predictor.006 -0.5410268 #> fitted.Predictor.007 -1.0483905 #> fitted.Predictor.008 -1.1165539 #> fitted.Predictor.009 -0.7041663 #> fitted.Predictor.010 -0.6407923 #> fitted.Predictor.011 -0.6867938 #> fitted.Predictor.012 -0.7933917 #> fitted.Predictor.013 -0.4945549 #> fitted.Predictor.014 -0.9505983 #> fitted.Predictor.015 -0.2561252 #> fitted.Predictor.016 -0.3807558 #> fitted.Predictor.017 -1.1010092 #> fitted.Predictor.018 -0.7868041 #> fitted.Predictor.019 -0.8908059 #> fitted.Predictor.020 -0.4651825 #> fitted.Predictor.021 -3.9533947 #> fitted.Predictor.022 -3.5035250 #> fitted.Predictor.023 -4.0013871 #> fitted.Predictor.024 -3.6411294 #> fitted.Predictor.025 -3.6093044 #> fitted.Predictor.026 -3.3887477 #> fitted.Predictor.027 -3.5035391 #> fitted.Predictor.028 -3.6586395 #> fitted.Predictor.029 -3.6964486 #> fitted.Predictor.030 -3.8020884 #> fitted.Predictor.031 -3.5613129 #> fitted.Predictor.032 -3.5077031 #> fitted.Predictor.033 -3.7138337 #> fitted.Predictor.034 -3.7091045 #> fitted.Predictor.035 -3.8766569 #> fitted.Predictor.036 -4.0508157 #> fitted.Predictor.037 -3.6454337 #> fitted.Predictor.038 -3.3371999 #> fitted.Predictor.039 -3.9236197 #> fitted.Predictor.040 -3.5923760 #> fitted.Predictor.041  1.6214941 #> fitted.Predictor.042  1.4336250 #> fitted.Predictor.043  1.8028739 #> fitted.Predictor.044  1.3908048 #> fitted.Predictor.045  1.1971321 #> fitted.Predictor.046  1.3267061 #> fitted.Predictor.047  1.4087355 #> fitted.Predictor.048  1.6095059 #> fitted.Predictor.049  1.4310367 #> fitted.Predictor.050  1.7476915 #> fitted.Predictor.051  1.6842003 #> fitted.Predictor.052  1.7020105 #> fitted.Predictor.053  1.4657849 #> fitted.Predictor.054  1.7443536 #> fitted.Predictor.055  2.1612490 #> fitted.Predictor.056  2.0135378 #> fitted.Predictor.057  1.9575316 #> fitted.Predictor.058  2.1955005 #> fitted.Predictor.059  2.2023580 #> fitted.Predictor.060  1.9940298 #> fitted.Predictor.061  2.0481619 #> fitted.Predictor.062  2.3865685 #> fitted.Predictor.063  2.4212055 #> fitted.Predictor.064  2.1945875 #> fitted.Predictor.065  1.7723956 #> fitted.Predictor.066  2.3313786 #> fitted.Predictor.067  2.3826390 #> fitted.Predictor.068  1.8348578 #> fitted.Predictor.069  2.1161564 #> fitted.Predictor.070  1.9571402 #> fitted.Predictor.071  2.0495413 #> fitted.Predictor.072  1.6908804 #> fitted.Predictor.073  1.6044357 #> fitted.Predictor.074  1.3647827 #> fitted.Predictor.075  1.6744628 #> fitted.Predictor.076  1.1930911 #> fitted.Predictor.077  1.6545235 #> fitted.Predictor.078  1.2501846 #> fitted.Predictor.079  1.2907050 #> fitted.Predictor.080  1.3539818 #> fitted.Predictor.081  1.2888035 #> fitted.Predictor.082  1.2958290 #> fitted.Predictor.083  1.1083632 #> fitted.Predictor.084  1.3773048 #> fitted.Predictor.085  1.2700577 #> fitted.Predictor.086  0.8797946 #> fitted.Predictor.087  0.5579726 #> fitted.Predictor.088  0.6078980 #> fitted.Predictor.089  0.3939109 #> fitted.Predictor.090  0.8381687 #> fitted.Predictor.091  0.2049870 #> fitted.Predictor.092  0.6372329 #> fitted.Predictor.093  0.1913499 #> fitted.Predictor.094  0.5426050 #> fitted.Predictor.095  0.6666773 #> fitted.Predictor.096  0.9443461 #> fitted.Predictor.097  0.9898618 #> fitted.Predictor.098  1.4407269 #> fitted.Predictor.099  1.1545274 #> fitted.Predictor.100  1.3388108 #>  #> $marginal #> NULL #>   samples <- simulate(LnGM)"},{"path":"/reference/summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Produces summaries of the ngvb.list object. â summary,ngvb.list-method","title":"Produces summaries of the ngvb.list object. â summary,ngvb.list-method","text":"Produces summaries ngvb.list object.","code":""},{"path":"/reference/summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produces summaries of the ngvb.list object. â summary,ngvb.list-method","text":"","code":"# S4 method for ngvb.list summary(object)"},{"path":"/reference/summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produces summaries of the ngvb.list object. â summary,ngvb.list-method","text":"object ngvb.list object (output ngvb function)","code":""},{"path":"/reference/summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produces summaries of the ngvb.list object. â summary,ngvb.list-method","text":"","code":"#Here we fit an RW1 latent process to the jumpts time series  plot(jumpts)    #Fit LGM with INLA  LGM     <- inla(y ~ -1 + f(x,  model = \"rw1\"),                  data = jumpts)   #Fit LnGM with ngvb  LnGM <- ngvb(fit = LGM, selection = list(x=1:100)) #> [1] \"Warning: You need to add log(|D|) to mll: check inla.doc(generic0)\" #>  #> 0Oo----------- Iteration 1 -----------oO0 #> Initial value of eta: 0.5 #>  #> 0Oo----------- Iteration 2 -----------oO0 #> Expectation of eta: 4.78 #>  #> 0Oo----------- Iteration 3 -----------oO0 #> Expectation of eta: 4.02 #>  #> 0Oo----------- Iteration 4 -----------oO0 #> Expectation of eta: 3.423 #>  #> 0Oo----------- Iteration 5 -----------oO0 #> Expectation of eta: 3.031 #>  #> 0Oo----------- Iteration 6 -----------oO0 #> Expectation of eta: 2.839 #>  #> 0Oo----------- Iteration 7 -----------oO0 #> Expectation of eta: 2.629 #>  #> 0Oo----------- Iteration 8 -----------oO0 #> Expectation of eta: 2.501 #>  #> 0Oo----------- Iteration 9 -----------oO0 #> Expectation of eta: 2.432 #>  #> 0Oo----------- Iteration 10 -----------oO0 #> Expectation of eta: 2.376 #>  #>  0Oo----------- Maximum number of iterations reached -----------oO0   #Available methods  summary(LnGM) #>                                     mean        sd 0.025quant 0.5quant #> Non Gaussianity parameter for x 2.376027 0.7463326   1.214328 2.280516 #>                                 0.975quant #> Non Gaussianity parameter for x   4.197902 #>  #> Call: #>    c(\"inla.core(formula = formula, family = family, contrasts = contrasts,  #>    \", \" data = data, quantiles = quantiles, E = E, offset = offset, \", \"  #>    scale = scale, weights = weights, Ntrials = Ntrials, strata = strata,  #>    \", \" lp.scale = lp.scale, link.covariates = link.covariates, verbose =  #>    verbose, \", \" lincomb = lincomb, selection = selection, control.compute  #>    = control.compute, \", \" control.predictor = control.predictor,  #>    control.family = control.family, \", \" control.inla = control.inla,  #>    control.fixed = control.fixed, \", \" control.mode = control.mode,  #>    control.expert = control.expert, \", \" control.hazard = control.hazard,  #>    control.lincomb = control.lincomb, \", \" control.update =  #>    control.update, control.lp.scale = control.lp.scale, \", \"  #>    control.pardiso = control.pardiso, only.hyperparam = only.hyperparam,  #>    \", \" inla.call = inla.call, inla.arg = inla.arg, num.threads =  #>    num.threads, \", \" blas.num.threads = blas.num.threads, keep = keep,  #>    working.directory = working.directory, \", \" silent = silent, inla.mode  #>    = inla.mode, safe = FALSE, debug = debug, \", \" .parent.frame =  #>    .parent.frame)\")  #> Random effects: #>   Name\t  Model #>     x Generic0 model #>  #> Model hyperparameters: #>                                             mean       sd 0.025quant 0.5quant #> Precision for the Gaussian observations 18779.68 1.84e+04    1350.26 13255.10 #> Precision for x                             4.53 6.39e-01       3.38     4.50 #>                                         0.975quant    mode #> Precision for the Gaussian observations   67919.58 3758.10 #> Precision for x                               5.90    4.44 #>  #> Marginal log-Likelihood:  -76.20  #>  is computed  #> Posterior summaries for the linear predictor and the fitted values are computed #> (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)') #>   print(LnGM) #> Call: #>    c(\"inla.core(formula = formula, family = family, contrasts = contrasts,  #>    \", \" data = data, quantiles = quantiles, E = E, offset = offset, \", \"  #>    scale = scale, weights = weights, Ntrials = Ntrials, strata = strata,  #>    \", \" lp.scale = lp.scale, link.covariates = link.covariates, verbose =  #>    verbose, \", \" lincomb = lincomb, selection = selection, control.compute  #>    = control.compute, \", \" control.predictor = control.predictor,  #>    control.family = control.family, \", \" control.inla = control.inla,  #>    control.fixed = control.fixed, \", \" control.mode = control.mode,  #>    control.expert = control.expert, \", \" control.hazard = control.hazard,  #>    control.lincomb = control.lincomb, \", \" control.update =  #>    control.update, control.lp.scale = control.lp.scale, \", \"  #>    control.pardiso = control.pardiso, only.hyperparam = only.hyperparam,  #>    \", \" inla.call = inla.call, inla.arg = inla.arg, num.threads =  #>    num.threads, \", \" blas.num.threads = blas.num.threads, keep = keep,  #>    working.directory = working.directory, \", \" silent = silent, inla.mode  #>    = inla.mode, safe = FALSE, debug = debug, \", \" .parent.frame =  #>    .parent.frame)\")  #> Time used: #>   Pre = 0.494, Running = 0.141, Post = 0.123, Total = 0.758 #>  #>   #> ngvb Configurations:  #> $h #> $h[[1]] #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> [39] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> [77] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #>  #>  #> $alpha.eta #> [1] 1 #>  #> $method #> [1] \"SCVI\" #>  #> $N #> [1] 100 #>  #> $ncomp #> [1] 1 #>  #> $selection #> $selection$x #>   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18 #>  [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36 #>  [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54 #>  [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72 #>  [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90 #>  [91]  91  92  93  94  95  96  97  98  99 100 #>  #>  #> $n.sampling #> [1] 1000 #>  #> $inla.fit.V #> function(V, theta = NULL){ #>  #>     for(i in 1:ncomp){ #>  #>       #USE generic0 or cgeneric? #>       if(use.generic0[i]){ #If so you only need to define matrices Q and rankdefs #>         D <- D.config[[i]]$D #>  #>         assign(paste('VINIG.Q.',i,sep=\"\"), as(t(D)%*%Diagonal(length(V[[i]]),1/V[[i]])%*%D, \"dgTMatrix\"), envir = .GlobalEnv) #>  #>       }else if( model[i] == \"iid\") { #>         assign(\"V\", V, envir = .GlobalEnv) #>  #>       }else if (model[i] == \"ar1\"){ #If so you only need to define matrices Q and rankdefs #>  #>  #>         pcprior <- D.config[[i]]$pcprior #>  #>         folder  <- paste0(system.file(package = 'ngvb'),'/cfiles/') #>  #>         cmodel  <- inla.cgeneric.define(model = \"inla_cgeneric_ar1_model\", #>                                         shlib = paste0(folder,\"cgeneric-ngvb.so\"), #>                                         n     = N[[i]], #>                                         V     = V[[i]], #>                                         U1    = pcprior$U1, #>                                         alpha1= pcprior$alpha1, #>                                         U2    = pcprior$U2, #>                                         alpha2= pcprior$alpha2) #>  #>         assign(paste('rgeneric',i,sep=\"\"), cmodel, envir = .GlobalEnv) #>  #>       } #>  #>       #needed for sampling from x for a fixed value of theta #>       if(!is.null(theta)){ #>         arglist$control.mode = list(theta = theta, fixed = TRUE) #>       } #>  #>       fit       <- do.call(inla, arglist) #>       return(fit) #>     } #>  #>     return(inla.fit.V) #>   } #> <bytecode: 0x00000265f3513b80> #> <environment: 0x00000265f16f4c30> #>   plot(LnGM)    fitted(LnGM) #> $summary #>                            mean          sd 0.025quant   0.5quant 0.975quant #> fitted.Predictor.001 -0.9080910 0.009755759 -0.9273873 -0.9082667 -0.8876108 #> fitted.Predictor.002 -0.5960215 0.009723226 -0.6169979 -0.5957896 -0.5771863 #> fitted.Predictor.003 -0.7245589 0.009725850 -0.7436623 -0.7247685 -0.7040012 #> fitted.Predictor.004 -0.6291304 0.009718504 -0.6499576 -0.6289300 -0.6101873 #> fitted.Predictor.005 -0.9996783 0.009797130 -1.0184816 -0.9999962 -0.9785286 #> fitted.Predictor.006 -0.5415204 0.009757449 -0.5627615 -0.5412454 -0.5227829 #> fitted.Predictor.007 -1.0482015 0.009720015 -1.0676705 -1.0483184 -1.0280279 #> fitted.Predictor.008 -1.1161376 0.009751776 -1.1351395 -1.1163841 -1.0953747 #> fitted.Predictor.009 -0.7043296 0.009701983 -0.7245913 -0.7042510 -0.6849571 #> fitted.Predictor.010 -0.6409409 0.009685717 -0.6611581 -0.6408651 -0.6215880 #> fitted.Predictor.011 -0.6868517 0.009687517 -0.7068407 -0.6868297 -0.6672878 #> fitted.Predictor.012 -0.7929720 0.009753063 -0.8119439 -0.7932267 -0.7721735 #> fitted.Predictor.013 -0.4950397 0.009749805 -0.5162460 -0.4947688 -0.4763007 #> fitted.Predictor.014 -0.9500771 0.009800334 -0.9689136 -0.9503880 -0.9289498 #> fitted.Predictor.015 -0.2565104 0.009728364 -0.2774050 -0.2562996 -0.2375883 #> fitted.Predictor.016 -0.3807704 0.009711557 -0.4007193 -0.3807693 -0.3610808 #> fitted.Predictor.017 -1.1004932 0.009794178 -1.1193331 -1.1008004 -1.0793939 #> fitted.Predictor.018 -0.7872031 0.009718130 -0.8080977 -0.7869872 -0.7683181 #> fitted.Predictor.019 -0.8903577 0.009760164 -0.9092909 -0.8906256 -0.8694912 #> fitted.Predictor.020 -0.4655597 0.009748290 -0.4864830 -0.4653517 -0.4465915 #> fitted.Predictor.021 -3.9529914 0.009782002 -3.9720463 -3.9532388 -3.9321647 #> fitted.Predictor.022 -3.5040076 0.009755844 -3.5252221 -3.5037377 -3.4852541 #> fitted.Predictor.023 -4.0008374 0.009800524 -4.0196142 -4.0011635 -3.9796458 #> fitted.Predictor.024 -3.6413135 0.009701655 -3.6616462 -3.6412181 -3.6220053 #> fitted.Predictor.025 -3.6090893 0.009710800 -3.6284749 -3.6092225 -3.5888697 #> fitted.Predictor.026 -3.3891362 0.009713623 -3.4100132 -3.3889224 -3.3702515 #> fitted.Predictor.027 -3.5035385 0.009693857 -3.5234105 -3.5035473 -3.4838438 #> fitted.Predictor.028 -3.6584921 0.009700172 -3.6780014 -3.6585902 -3.6384327 #> fitted.Predictor.029 -3.6964943 0.009686763 -3.7164663 -3.6964757 -3.6769179 #> fitted.Predictor.030 -3.8016904 0.009748490 -3.8206886 -3.8019364 -3.7809368 #> fitted.Predictor.031 -3.5614391 0.009695683 -3.5816369 -3.5613725 -3.5420327 #> fitted.Predictor.032 -3.5079979 0.009701504 -3.5286063 -3.5078395 -3.4889290 #> fitted.Predictor.033 -3.7135721 0.009715315 -3.7328539 -3.7137327 -3.6932333 #> fitted.Predictor.034 -3.7092880 0.009691172 -3.7296103 -3.7091902 -3.6900085 #> fitted.Predictor.035 -3.8766408 0.009698950 -3.8964733 -3.8766609 -3.8568910 #> fitted.Predictor.036 -4.0503274 0.009777708 -4.0691661 -4.0506271 -4.0292922 #> fitted.Predictor.037 -3.6453971 0.009718088 -3.6652376 -3.6454245 -3.6255832 #> fitted.Predictor.038 -3.3376731 0.009751524 -3.3588646 -3.3374065 -3.3189156 #> fitted.Predictor.039 -3.9230939 0.009797918 -3.9418955 -3.9234125 -3.9019390 #> fitted.Predictor.040 -3.5924993 0.009728035 -3.6127333 -3.5924391 -3.5730076 #> fitted.Predictor.041  1.6211690 0.009731291  1.6004183  1.6213460  1.6402224 #> fitted.Predictor.042  1.4341198 0.009777130  1.4152842  1.4338194  1.4551555 #> fitted.Predictor.043  1.8024052 0.009751142  1.7812095  1.8026730  1.8211578 #> fitted.Predictor.044  1.3908688 0.009714700  1.3711132  1.3908230  1.4107492 #> fitted.Predictor.045  1.1975444 0.009748641  1.1785736  1.1972916  1.2183269 #> fitted.Predictor.046  1.3266805 0.009691242  1.3067633  1.3266840  1.3463236 #> fitted.Predictor.047  1.4088755 0.009703461  1.3893178  1.4087874  1.4289010 #> fitted.Predictor.048  1.6090757 0.009721943  1.5880761  1.6093134  1.6278871 #> fitted.Predictor.049  1.4315477 0.009775975  1.4127374  1.4312413  1.4526055 #> fitted.Predictor.050  1.7473582 0.009712124  1.7266205  1.7475413  1.7663545 #> fitted.Predictor.051  1.6843359 0.009697785  1.6647971  1.6842457  1.7043581 #> fitted.Predictor.052  1.7017895 0.009701002  1.6813400  1.7019120  1.7209933 #> fitted.Predictor.053  1.4662909 0.009780435  1.4474791  1.4659831  1.4873653 #> fitted.Predictor.054  1.7443833 0.009716967  1.7245477  1.7443554  1.7641974 #> fitted.Predictor.055  2.1608142 0.009731392  2.1397845  2.1610540  2.1796345 #> fitted.Predictor.056  2.0136724 0.009699419  1.9941187  2.0135854  2.0336864 #> fitted.Predictor.057  1.9578987 0.009735434  1.9388201  1.9576789  1.9785191 #> fitted.Predictor.058  2.1952801 0.009697460  2.1748695  2.1953951  2.2145054 #> fitted.Predictor.059  2.2021358 0.009696493  2.1817213  2.2022522  2.2213542 #> fitted.Predictor.060  1.9943787 0.009729876  1.9752700  1.9941690  2.0149470 #> fitted.Predictor.061  2.0483594 0.009715287  2.0289362  2.0482336  2.0685595 #> fitted.Predictor.062  2.3863856 0.009700853  2.3660524  2.3864811  2.4056911 #> fitted.Predictor.063  2.4209313 0.009700710  2.4003591  2.4210817  2.4400287 #> fitted.Predictor.064  2.1946234 0.009715025  2.1747917  2.1945953  2.2144340 #> fitted.Predictor.065  1.7728747 0.009793846  1.7539990  1.7725768  1.7939350 #> fitted.Predictor.066  2.3312620 0.009706023  2.3110638  2.3313238  2.3507059 #> fitted.Predictor.067  2.3823234 0.009715231  2.3616338  2.3824939  2.4013720 #> fitted.Predictor.068  1.8354054 0.009796146  1.8166219  1.8350830  1.8565722 #> fitted.Predictor.069  2.1157137 0.009726657  2.0946831  2.1159563  2.1345158 #> fitted.Predictor.070  1.9575082 0.009731112  1.9384410  1.9572872  1.9781230 #> fitted.Predictor.071  2.0491629 0.009717830  2.0283159  2.0493680  2.0680871 #> fitted.Predictor.072  1.6910448 0.009715436  1.6715241  1.6909422  1.7111511 #> fitted.Predictor.073  1.6043378 0.009697631  1.5842357  1.6043817  1.6238365 #> fitted.Predictor.074  1.3653076 0.009783727  1.3465115  1.3649941  1.3864115 #> fitted.Predictor.075  1.6739845 0.009750179  1.6527890  1.6742529  1.6927336 #> fitted.Predictor.076  1.1936164 0.009800192  1.1748083  1.1932983  1.2147733 #> fitted.Predictor.077  1.6540432 0.009753715  1.6328360  1.6543124  1.6727952 #> fitted.Predictor.078  1.2505266 0.009738560  1.2313950  1.2503184  1.2711054 #> fitted.Predictor.079  1.2907598 0.009689088  1.2710418  1.2907170  1.3105795 #> fitted.Predictor.080  1.3538096 0.009687128  1.3335347  1.3538982  1.3731163 #> fitted.Predictor.081  1.2889390 0.009693287  1.2693955  1.2888521  1.3089396 #> fitted.Predictor.082  1.2956129 0.009692850  1.2752207  1.2957262  1.3148370 #> fitted.Predictor.083  1.1088498 0.009770942  1.0900049  1.1085547  1.1298512 #> fitted.Predictor.084  1.3769508 0.009715937  1.3561295  1.3771509  1.3958903 #> fitted.Predictor.085  1.2699522 0.009703690  1.2498297  1.2699974  1.2894554 #> fitted.Predictor.086  0.8798190 0.009717186  0.8599727  0.8797935  0.8996240 #> fitted.Predictor.087  0.5583497 0.009740011  0.5392764  0.5581263  0.5789932 #> fitted.Predictor.088  0.6076062 0.009700815  0.5870129  0.6077620  0.6266848 #> fitted.Predictor.089  0.3944279 0.009784847  0.3756142  0.3941184  0.4155176 #> fitted.Predictor.090  0.8377039 0.009755959  0.8165251  0.8379657  0.8564870 #> fitted.Predictor.091  0.2055157 0.009802038  0.1867074  0.2051968  0.2266797 #> fitted.Predictor.092  0.6367405 0.009755879  0.6154910  0.6370182  0.6554654 #> fitted.Predictor.093  0.1918941 0.009799143  0.1731203  0.1915677  0.2130835 #> fitted.Predictor.094  0.5425505 0.009702375  0.5225363  0.5425715  0.5621462 #> fitted.Predictor.095  0.6667681 0.009705824  0.6471139  0.6667021  0.6867108 #> fitted.Predictor.096  0.9441941 0.009697710  0.9239394  0.9442732  0.9635571 #> fitted.Predictor.097  0.9900629 0.009720379  0.9706407  0.9899342  1.0102834 #> fitted.Predictor.098  1.4402435 0.009749476  1.4190212  1.4405181  1.4589684 #> fitted.Predictor.099  1.1550300 0.009773893  1.1362065  1.1547280  1.1760657 #> fitted.Predictor.100  1.3386134 0.009723123  1.3182092  1.3387153  1.3579366 #>                            mode #> fitted.Predictor.001 -0.9083757 #> fitted.Predictor.002 -0.5956039 #> fitted.Predictor.003 -0.7249040 #> fitted.Predictor.004 -0.6287666 #> fitted.Predictor.005 -1.0002067 #> fitted.Predictor.006 -0.5410305 #> fitted.Predictor.007 -1.0483850 #> fitted.Predictor.008 -1.1165440 #> fitted.Predictor.009 -0.7041763 #> fitted.Predictor.010 -0.6407927 #> fitted.Predictor.011 -0.6867956 #> fitted.Predictor.012 -0.7933934 #> fitted.Predictor.013 -0.4945562 #> fitted.Predictor.014 -0.9505931 #> fitted.Predictor.015 -0.2561300 #> fitted.Predictor.016 -0.3807512 #> fitted.Predictor.017 -1.1010030 #> fitted.Predictor.018 -0.7868124 #> fitted.Predictor.019 -0.8908019 #> fitted.Predictor.020 -0.4651845 #> fitted.Predictor.021 -3.9533987 #> fitted.Predictor.022 -3.5035263 #> fitted.Predictor.023 -4.0013796 #> fitted.Predictor.024 -3.6411305 #> fitted.Predictor.025 -3.6093023 #> fitted.Predictor.026 -3.3887501 #> fitted.Predictor.027 -3.5035364 #> fitted.Predictor.028 -3.6586440 #> fitted.Predictor.029 -3.6964436 #> fitted.Predictor.030 -3.8020966 #> fitted.Predictor.031 -3.5613064 #> fitted.Predictor.032 -3.5077070 #> fitted.Predictor.033 -3.7138322 #> fitted.Predictor.034 -3.7091010 #> fitted.Predictor.035 -3.8766574 #> fitted.Predictor.036 -4.0508247 #> fitted.Predictor.037 -3.6454267 #> fitted.Predictor.038 -3.3371975 #> fitted.Predictor.039 -3.9236232 #> fitted.Predictor.040 -3.5923775 #> fitted.Predictor.041  1.6214918 #> fitted.Predictor.042  1.4336204 #> fitted.Predictor.043  1.8028830 #> fitted.Predictor.044  1.3908077 #> fitted.Predictor.045  1.1971268 #> fitted.Predictor.046  1.3267051 #> fitted.Predictor.047  1.4087405 #> fitted.Predictor.048  1.6095034 #> fitted.Predictor.049  1.4310378 #> fitted.Predictor.050  1.7476919 #> fitted.Predictor.051  1.6841969 #> fitted.Predictor.052  1.7020193 #> fitted.Predictor.053  1.4657794 #> fitted.Predictor.054  1.7443531 #> fitted.Predictor.055  2.1612445 #> fitted.Predictor.056  2.0135397 #> fitted.Predictor.057  1.9575375 #> fitted.Predictor.058  2.1954962 #> fitted.Predictor.059  2.2023543 #> fitted.Predictor.060  1.9940348 #> fitted.Predictor.061  2.0481606 #> fitted.Predictor.062  2.3865677 #> fitted.Predictor.063  2.4212080 #> fitted.Predictor.064  2.1945927 #> fitted.Predictor.065  1.7723813 #> fitted.Predictor.066  2.3313860 #> fitted.Predictor.067  2.3826347 #> fitted.Predictor.068  1.8348691 #> fitted.Predictor.069  2.1161498 #> fitted.Predictor.070  1.9571435 #> fitted.Predictor.071  2.0495346 #> fitted.Predictor.072  1.6908851 #> fitted.Predictor.073  1.6044321 #> fitted.Predictor.074  1.3647862 #> fitted.Predictor.075  1.6744637 #> fitted.Predictor.076  1.1930879 #> fitted.Predictor.077  1.6545234 #> fitted.Predictor.078  1.2501854 #> fitted.Predictor.079  1.2907037 #> fitted.Predictor.080  1.3539806 #> fitted.Predictor.081  1.2888059 #> fitted.Predictor.082  1.2958270 #> fitted.Predictor.083  1.1083594 #> fitted.Predictor.084  1.3773134 #> fitted.Predictor.085  1.2700474 #> fitted.Predictor.086  0.8797930 #> fitted.Predictor.087  0.5579821 #> fitted.Predictor.088  0.6078938 #> fitted.Predictor.089  0.3939133 #> fitted.Predictor.090  0.8381713 #> fitted.Predictor.091  0.2049859 #> fitted.Predictor.092  0.6372354 #> fitted.Predictor.093  0.1913515 #> fitted.Predictor.094  0.5426051 #> fitted.Predictor.095  0.6666716 #> fitted.Predictor.096  0.9443487 #> fitted.Predictor.097  0.9898582 #> fitted.Predictor.098  1.4407332 #> fitted.Predictor.099  1.1545278 #> fitted.Predictor.100  1.3388071 #>  #> $marginal #> NULL #>   samples <- simulate(LnGM)"}]
